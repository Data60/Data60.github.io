WEBVTT
Kind: captions
Language: zh-CN

00:00:00.190 --> 00:00:04.080
你以前写代码时使用过变量

00:00:04.080 --> 00:00:06.830
列表、字典和对象这样的数据结构

00:00:06.830 --> 00:00:10.380
这些都可让你的程序在运行时存储信息

00:00:10.380 --> 00:00:14.830
你可以建立复杂的数据结构 比如由字典组成的列表

00:00:14.830 --> 00:00:19.960
当程序退出时 这类结构会从内存中消除

00:00:19.960 --> 00:00:21.480
你可能已经与文件打过交道了

00:00:21.480 --> 00:00:24.240
例如 你自己写的代码文件

00:00:24.240 --> 00:00:28.370
如果你在文本编辑器中编辑代码并保存 然后退出编辑器

00:00:28.370 --> 00:00:32.689
在程序退出时 你的代码不会像变量那样消失不见 

00:00:32.689 --> 00:00:34.100
文件始终存在 或者说

00:00:34.100 --> 00:00:38.430
是持久的 然而内存中数据是会消失的 或者说是短暂的

00:00:38.430 --> 00:00:43.690
程序可以很好地读写文件 那么为何还要用数据库？

00:00:43.690 --> 00:00:47.020
数据库有不同的种类 但是

00:00:47.020 --> 00:00:49.870
它们的共同之处就是既具有持久性

00:00:49.870 --> 00:00:54.080
就像文件一样 还具有用于存储和搜索数据的结构

00:00:54.080 --> 00:00:57.730
通常比我们搜索一个平面文件更快更容易

00:00:57.730 --> 00:01:01.690
它们还可实现多程序或多用户访问

00:01:01.690 --> 00:01:05.060
可同时对数据进行修改 而不会发生冲突

00:01:05.060 --> 00:01:07.930
也不会意外取消彼此所做的修改

00:01:07.930 --> 00:01:11.150
这对平面文件来说一般是不可能的

00:01:11.150 --> 00:01:14.950
如果两个程序同时修改文件

00:01:14.950 --> 00:01:17.300
那么一个会覆盖另一个

00:01:18.470 --> 00:01:21.170
虽然其它类型的数据库也具有这些特点

00:01:21.170 --> 00:01:23.670
但关系数据库能做的更多

00:01:23.670 --> 00:01:27.720
除了存储数据 关系数据库还为查询

00:01:27.720 --> 00:01:30.440
和汇总数据提供非常灵活的工具

00:01:30.440 --> 00:01:32.840
如果我们进行对比

00:01:32.840 --> 00:01:35.550
或者在相关联的信息之间建立连接

00:01:36.700 --> 00:01:40.290
我们还可以通过它们来设置约束条件 这些条件可以确保

00:01:40.290 --> 00:01:42.060
我们对数据所做的修改是一致的

00:01:42.060 --> 00:01:44.920
在本课后续部分 我们将学习更多这方面的内容

00:01:44.920 --> 00:01:47.250
现在 我们先来看看关系数据库如何存储数据

