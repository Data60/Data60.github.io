WEBVTT
Kind: captions
Language: ja

00:00:00.190 --> 00:00:03.980
このレッスンでは条件付平均値の図を2つ作成しました

00:00:03.980 --> 00:00:07.360
では2つの図の違いを観察しましょう

00:00:07.360 --> 00:00:10.700
2番目のコードのまとまりがこの図に

00:00:10.700 --> 00:00:14.180
1番目のコードのまとまりがこの図になります

00:00:14.180 --> 00:00:19.500
71歳以下のユーザを見るため
データの部分集合を作ったと思いますが

00:00:19.500 --> 00:00:21.160
ここでもやってみます

00:00:21.160 --> 00:00:25.340
コードを実行すると
x軸が71以下になったのが分かります

00:00:25.340 --> 00:00:29.660
では2つの図を並べてよく見ていきましょう

00:00:29.660 --> 00:00:33.550
前にも教えましたが基本的には各図を変数に保存し

00:00:33.550 --> 00:00:36.800
これらの変数を1つの列に作図します

00:00:36.800 --> 00:00:40.000
これが年齢、年齢と月数の違いです

00:00:40.000 --> 00:00:43.620
幅を小さくしビンの数を増やしたことで

00:00:43.620 --> 00:00:48.150
それぞれの条件付平均値を推測するデータが
少なくなりました

00:00:48.150 --> 00:00:50.260
このグラフのほうがビンの幅が細かいので

00:00:50.260 --> 00:00:52.580
ノイズがひどくなっています

00:00:52.580 --> 00:00:56.870
ただし別の分け方で
ビンのサイズを拡大することもできます

00:00:56.870 --> 00:01:01.080
例えば年齢を5の倍数でひと塊にすることができます

00:01:01.080 --> 00:01:03.920
やり方としてはグラフを切り分け

00:01:03.920 --> 00:01:07.580
友達数の中央値を一緒に平均化します

00:01:07.580 --> 00:01:10.090
40歳の前後2年半のユーザを

00:01:10.090 --> 00:01:12.320
1つのポイントにまとめます

00:01:12.320 --> 00:01:15.465
同じ処理を50歳の前後2年半のユーザと

00:01:15.465 --> 00:01:18.040
60歳の前後2年半のユーザにも行います

00:01:18.040 --> 00:01:20.690
ではコードで見てみましょう

00:01:20.690 --> 00:01:25.920
まず5で割った年齢で整数に直し
5の倍数になる図を作成します

00:01:25.920 --> 00:01:28.980
そしてデータフレームの部分集合を作り

00:01:28.980 --> 00:01:32.920
geom＿line中でstatパラメータとして
summaryを指定します

00:01:32.920 --> 00:01:36.860
今は友達数ではなく友達数の平均値の図が必要なので

00:01:36.860 --> 00:01:40.400
summaryをstatでつなぎmeanとfun．yをつなぎます

00:01:40.400 --> 00:01:42.500
図を保存し他の図に加えます

00:01:42.500 --> 00:01:47.180
その結果データ点が少なくなりビン幅が広がりました

00:01:47.180 --> 00:01:51.040
こうすることで平均値をより正確に推測できますが

00:01:51.040 --> 00:01:55.500
年齢と友達数の関連性の大切な特徴を
見落とす可能性があります

00:01:55.500 --> 00:01:59.200
これはバイアス・バリアンスのトレードオフの
関係の例で

00:01:59.200 --> 00:02:03.450
ヒストグラムのビン幅を選ぶ時の
トレードオフに似ています

00:02:03.450 --> 00:02:05.890
解析者がこれを改善する時は

00:02:05.890 --> 00:02:10.240
柔軟な統計モデルを使い
条件付平均値の予測を滑らかにします

00:02:10.240 --> 00:02:14.700
ggplotではgeom＿smoothが
こうしたモデルと適合しやすいです

00:02:14.700 --> 00:02:16.610
すべてのノイズを見なくても

00:02:16.610 --> 00:02:20.220
データに適合する円滑なモジュラー関数が得られます

00:02:20.220 --> 00:02:22.680
この図でもやってみましょう

00:02:22.680 --> 00:02:27.220
1つ目と2つ目の図にgeom＿smoothレイヤを足します

00:02:27.220 --> 00:02:31.000
どのモデルを使うかはggplotのデフォルトで

00:02:31.000 --> 00:02:32.740
自動的に判断されます

00:02:32.740 --> 00:02:36.370
モデルとパラメータについて詳しく調べたい場合は

00:02:36.370 --> 00:02:39.460
geom smoothドキュメントを検索してください

00:02:39.460 --> 00:02:41.960
2つの図を保存しコードを実行します

00:02:41.960 --> 00:02:44.860
これが年齢と月数の平滑化曲線で

00:02:44.860 --> 00:02:47.380
これが年齢の平滑化曲線です

00:02:47.380 --> 00:02:50.640
この関連性の特徴をつかんでいますが

00:02:50.640 --> 00:02:55.140
低い年齢の非単調な関係性には注目していません

00:02:55.140 --> 00:02:59.280
それだけでなく69歳の不連続点も見逃しています

00:02:59.280 --> 00:03:04.480
low sや平滑化スプライン法といった
モデルの使用は役に立ちます

00:03:04.480 --> 00:03:06.270
ですが他のモデル同様

00:03:06.270 --> 00:03:10.200
モデルとデータ生成のプロセスに一貫性がないと

00:03:10.200 --> 00:03:12.920
システムエラーの原因となります

00:03:12.920 --> 00:03:17.260
実際の関数は平滑であるという考えの基
モデルはできています

00:03:17.260 --> 00:03:20.470
しかしその関連性には不連続点もあります

