WEBVTT
Kind: captions
Language: zh-CN

00:00:00.120 --> 00:00:01.990
我们后退一步 看看我们的

00:00:01.990 --> 00:00:05.200
好友数与年龄散点图 这个散点图

00:00:05.200 --> 00:00:08.370
让我们非常了解数据 因为我们将数据集中的

00:00:08.370 --> 00:00:11.640
所有点实现可视化 通常 从这样的显示中

00:00:11.640 --> 00:00:15.430
无法判断重要的量

00:00:15.430 --> 00:00:18.590
有时候需要了解变量的平均值或中位数的情况

00:00:18.590 --> 00:00:21.520
对另一个变量会有不同 因可通过其它方式

00:00:21.520 --> 00:00:25.500
来帮助汇总两个变量之间的关系 

00:00:25.500 --> 00:00:28.880
而不仅仅总是绘制单个点的图形

00:00:28.880 --> 00:00:32.790
例如 我们可以问平均好友数随年龄如何变化

00:00:32.790 --> 00:00:35.810
要回答这个问题 我们可以先为每个年龄创建一个表

00:00:35.810 --> 00:00:39.140
提供收入的平均值和中位数

00:00:39.140 --> 00:00:41.520
这就需要学习一些新的代码

00:00:41.520 --> 00:00:44.090
要创建这个表 我们使用名叫 D Plyr 的 R 程序包

00:00:44.090 --> 00:00:48.180
我现在安装并加载这个程序包

00:00:48.180 --> 00:00:50.730
D Plyr 程序包可让我们分割DataFrame 

00:00:50.730 --> 00:00:53.560
然后向数据的某些部分应用某个函数

00:00:53.560 --> 00:00:57.090
可能会用到的这些常见函数包括筛选 分组

00:00:57.090 --> 00:01:01.400
突变和整理 你可以从链接和导师注解中

00:01:01.400 --> 00:01:04.480
了解 deplier 程序包并浏览一些示例

00:01:04.480 --> 00:01:07.280
现在 我们一起来看一个示例

00:01:07.280 --> 00:01:09.850
首先我要做的是

00:01:09.850 --> 00:01:13.380
按年龄对DataFrame进行分组

00:01:13.380 --> 00:01:16.640
我将这个分组保存到名为 age groups 的新变量里

00:01:16.640 --> 00:01:20.020
接下来对这个新组的足够数据进行汇总

00:01:20.020 --> 00:01:24.150
创建新变量 平均发帖量 中位数好友数和每个组中的人数

00:01:24.150 --> 00:01:27.860
我们将对刚创建的 

00:01:27.860 --> 00:01:31.530
age groups 变量进行汇总

00:01:31.530 --> 00:01:33.570
输入要使用的DataFrame

00:01:33.570 --> 00:01:36.220
输出要创建的变量

00:01:36.220 --> 00:01:38.780
我需要好友数平均值 

00:01:38.780 --> 00:01:41.720
通过对变量好友数取平均值即可得到

00:01:41.720 --> 00:01:44.580
我需要好友数中位数 最后 我需要每个组内的用户数

00:01:44.580 --> 00:01:47.610
在这个函数中不仅可用于汇总

00:01:47.610 --> 00:01:50.360
而且可以报告每个组中的实际人数

00:01:50.360 --> 00:01:53.270
我要做的最后一点是将这个结果

00:01:53.270 --> 00:01:56.570
保存到新的变量中 我使用相同的DataFrame缩写

00:01:56.570 --> 00:02:00.210
然后添加 FCbyAge 因为我们有了按年龄划分的好友数

00:02:00.210 --> 00:02:02.750
运行这个代码 可以看到我获得一个

00:02:02.750 --> 00:02:08.250
含 101 个观察或者分组以及四个不同变量的新DataFrame

00:02:08.250 --> 00:02:10.389
使用 head 命令 可打印出前面几行

00:02:10.389 --> 00:02:14.590
来检查DataFrame 注意这里有年龄

00:02:14.590 --> 00:02:18.260
好友数平均 好友数中位数以及每个组内用户数 n

00:02:18.260 --> 00:02:21.610
现在这个真的状态没有进行排序

00:02:21.610 --> 00:02:24.070
所以 我将重新整理DataFrame 

00:02:24.070 --> 00:02:27.590
使年龄从低到高排列 我刚刚在当前DataFrame

00:02:27.590 --> 00:02:30.780
上使用了整理函数 按年龄进行排列

00:02:30.780 --> 00:02:34.080
我将结果保存到刚才的变量

00:02:34.080 --> 00:02:36.700
现在离开DataFrame 可以看到所有数据顺序已经排好

00:02:36.700 --> 00:02:40.360
这看起来好像有很多代码 所以

00:02:40.360 --> 00:02:43.270
我鼓励你花点时间好好检查代码和示例

00:02:43.270 --> 00:02:46.970
一定要弄明白每个部分的功能

00:02:46.970 --> 00:02:49.780
这样就可以自己编写代码

00:02:49.780 --> 00:02:52.080
我需要指出的两点是 我们需要在每个函数的开始

00:02:52.080 --> 00:02:56.000
传递一个DataFrame 或者分组 

00:02:56.000 --> 00:02:59.200
还需要将结果保存到新变量中 我们将其传递给

00:02:59.200 --> 00:03:02.060
下一个函数 

00:03:02.060 --> 00:03:04.920
这就是这个代码一开始难以理解的地方

00:03:04.920 --> 00:03:08.180
我要介绍另一种方法来获得相同的表

00:03:08.180 --> 00:03:10.680
开始时先取数据集并应用一些函数

00:03:10.680 --> 00:03:14.300
方法是 %.% 符号

00:03:14.300 --> 00:03:18.460
这样可将函数链接到数据集上

00:03:18.460 --> 00:03:20.990
我将一次执行一个函数

00:03:20.990 --> 00:03:24.220
在 pf 上逐个进行 首先要做的是按年龄

00:03:24.220 --> 00:03:26.570
对数据集分析 现在要再链上一个函数

00:03:26.570 --> 00:03:30.400
我要使用好友数平均值来汇总结果

00:03:30.400 --> 00:03:33.610
好友数中位数 以及 n 最后我再添加一个函数

00:03:33.610 --> 00:03:37.710
使用这个链接命令 %.%

00:03:37.710 --> 00:03:40.790
这次我按年龄整理DataFrame

00:03:40.790 --> 00:03:43.340
所有这些代码将生成这样的DataFrame

00:03:43.340 --> 00:03:45.850
我要确认将其保存到变量

00:03:45.850 --> 00:03:49.280
我将其保存到 pf 按年龄的好友数

00:03:49.280 --> 00:03:51.250
然后像以前一样 head DataFrame

00:03:51.250 --> 00:03:54.190
这样即可检查结果 运行此代码 可以看到

00:03:54.190 --> 00:03:57.270
我们获得完全相同的结果 有年龄 好友数平均值

00:03:57.270 --> 00:04:00.760
好友数中位数以及每个年龄组内的用户数

00:04:00.760 --> 00:04:04.110
打印出更多行 

00:04:04.110 --> 00:04:07.860
可仔细检查这个表 了解年龄与好友数之间的关系

00:04:07.860 --> 00:04:11.650
我们已经注意到 平均来看 年龄在 13 岁的用户

00:04:11.650 --> 00:04:14.320
比 14 岁的好友数略低

00:04:14.320 --> 00:04:17.040
同时 看起来好像平均好友数的峰值位于

00:04:17.040 --> 00:04:21.320
16 和 17 岁 当然

00:04:21.320 --> 00:04:23.510
我们不想对这样的表进行汇总和挖掘

00:04:23.510 --> 00:04:27.270
这会非常乏味 我们可以通过可视化

00:04:27.270 --> 00:04:30.480
非常有效地显示这些观察

00:04:30.480 --> 00:04:34.170
我们来绘出这个平均值表的图形 这将是你的下一个编程作业

00:04:34.170 --> 00:04:36.770
我希望你对平均好友数与年龄关系绘图

00:04:36.770 --> 00:04:40.070
确定要使用合适的数据集

00:04:40.070 --> 00:04:41.660
我们在此使用这个刚创建的新数据集

00:04:41.660 --> 00:04:44.280
一定要使用正确的变量名称

00:04:44.280 --> 00:04:47.460
这与以前的不同 需要大家在 RStudio 里

00:04:47.460 --> 00:04:49.840
创建自己的绘图 然后与我们的结果比对

