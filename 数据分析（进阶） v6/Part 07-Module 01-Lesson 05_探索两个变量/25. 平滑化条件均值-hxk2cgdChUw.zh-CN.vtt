WEBVTT
Kind: captions
Language: zh-CN

00:00:00.190 --> 00:00:02.925
在这一课里 你将创建条件平均的图形

00:00:02.925 --> 00:00:05.800
我们来细致观察一下两幅图

00:00:05.800 --> 00:00:08.980
看看二者的区别

00:00:08.980 --> 00:00:12.430
第二个代码块生成这幅图 

00:00:12.430 --> 00:00:15.960
第一个代码块生成这幅图 现在来将DataFrame划分子集

00:00:15.960 --> 00:00:18.440
仅考虑 71 岁或以下的用户

00:00:18.440 --> 00:00:21.830
我们这里同样操作 运行代码

00:00:21.830 --> 00:00:25.010
可以看到我们在限制 x 轴

00:00:25.010 --> 00:00:27.560
我要做的是将两幅图并排放置

00:00:27.560 --> 00:00:30.500
这样可以一起观察

00:00:30.500 --> 00:00:33.550
你以前也了解了 我们基本上会说 每个图对应一个变量 

00:00:33.550 --> 00:00:36.800
然后将这些变量绘制到一列

00:00:36.800 --> 00:00:40.430
这是年龄与含月年龄之间的差别

00:00:40.430 --> 00:00:44.270
通过降低容器大小并增加容器数量

00:00:44.270 --> 00:00:48.150
我们减少了估计每个条件平均的数据

00:00:48.150 --> 00:00:50.260
可以看出在这幅图上噪声要糟得多

00:00:50.260 --> 00:00:53.870
因为我们采用更精细的容器

00:00:53.870 --> 00:00:56.870
另一方面 我们可以走向另一个方向 增加容器大小

00:00:56.870 --> 00:01:00.550
比如 我们可以将年龄在五的倍数内的用户混合在一起

00:01:00.550 --> 00:01:03.920
其实我们就要这样做

00:01:03.920 --> 00:01:07.430
我们将把图形分割 将这些平均好友数一起平均

00:01:07.430 --> 00:01:10.090
因此 位于 40 上下 2.5 岁的用户

00:01:10.090 --> 00:01:13.155
将混合成一个点

00:01:13.155 --> 00:01:15.465
对于 50 上下 2.5 岁的用户也一样

00:01:15.465 --> 00:01:17.445
对于 60 上下 2.5 岁的用户也一样

00:01:17.445 --> 00:01:20.690
我将在代码中表达我的含义

00:01:20.690 --> 00:01:24.720
这里 我创建一幅图 使用的年龄用五来除 

00:01:24.720 --> 00:01:28.190
圆整后再乘以五 同时也将DataFrame划分子集

00:01:28.190 --> 00:01:30.660
就像其它图形一样 我要做的最后一件事情就是

00:01:30.660 --> 00:01:34.120
添加一条 geom 线并使用统计摘要 其实我不想绘制

00:01:34.120 --> 00:01:36.860
好友数图 而是绘制平均好友数图

00:01:36.860 --> 00:01:40.710
将摘要传递给 stat 将平均值传递给 fun.y 

00:01:40.710 --> 00:01:42.500
保存这幅图 与其它图放在一起

00:01:42.500 --> 00:01:45.909
看到我们如何减少数据点了吗？

00:01:45.909 --> 00:01:49.580
容器宽度更大 这样可以更精确地估计平均值

00:01:49.580 --> 00:01:53.780
但是潜在地丢失了年龄与好友数关系的重要特征

00:01:53.780 --> 00:01:57.080
这三幅图是方差偏差折衷的示例

00:01:57.080 --> 00:02:00.200
这类似于我们在直方图中

00:02:00.200 --> 00:02:03.450
选择容器宽度时所做的折衷

00:02:03.450 --> 00:02:05.890
分析师在做这种折衷时 可以使用

00:02:05.890 --> 00:02:09.370
灵活的统计模型对条件平均的估计进行平滑

00:02:09.370 --> 00:02:13.555
ggplot 使用 geom 平滑来便于对这种模型的拟合

00:02:13.555 --> 00:02:16.610
所以 不用看到所有这种噪音

00:02:16.610 --> 00:02:19.690
我们采用平滑模函数来拟合数据

00:02:19.690 --> 00:02:21.540
我们对这幅图做同样操作

00:02:21.540 --> 00:02:24.760
将 geom 平滑层添加到

00:02:24.760 --> 00:02:27.590
第一幅图和第二幅图中

00:02:27.590 --> 00:02:31.000
我只是使用 ggplot 的默认值 所以要使用的模型

00:02:31.000 --> 00:02:33.430
已经为我们选择好了

00:02:33.430 --> 00:02:36.370
如果你有兴趣对模型和参数进行探索

00:02:36.370 --> 00:02:39.460
请查阅 geom 平滑文档

00:02:39.460 --> 00:02:41.690
我将保存这两幅图 然后重新运行代码

00:02:41.690 --> 00:02:45.610
这是用于 age_with_months 的平滑器 

00:02:45.610 --> 00:02:49.290
这是用于年龄的平滑器 虽然平滑器能够捕获

00:02:49.290 --> 00:02:52.165
这种关系的特征 但不会吸引

00:02:52.165 --> 00:02:56.280
低龄用户中非单调关系的注意 不仅这样

00:02:56.280 --> 00:02:58.740
而且事实在年龄 69 处失去连续性

00:02:58.740 --> 00:03:02.610
这凸显了使用 LOESS 或平滑样条之类模型的实用性

00:03:02.610 --> 00:03:06.270
但与几乎所有模型一样

00:03:06.270 --> 00:03:09.010
当生成数据的真实流程与模型本身不太一致时

00:03:09.010 --> 00:03:12.090
容易出现系统误差

00:03:12.090 --> 00:03:14.640
在这里 模型是基于

00:03:14.640 --> 00:03:17.730
真实函数是平滑的这种概念

00:03:17.730 --> 00:03:20.470
但我们知道 关系中存在某种不连续性

