WEBVTT
Kind: captions
Language: zh-CN

00:00:00.630 --> 00:00:04.730
你可以使用创建表格命令 向数据库中添加新的空表格 

00:00:05.770 --> 00:00:09.900
在创建表格时 你需要对 表格以及表格中每一列

00:00:09.900 --> 00:00:11.870
的名称和类型进行命名 

00:00:11.870 --> 00:00:16.650
你也可以对每一列 和所有行设置约束 

00:00:16.650 --> 00:00:20.320
我们将很快讨论约束  现在重点讨论类型 

00:00:20.320 --> 00:00:23.200
这是最简单的创建表格命令类型 没有任何约束 只有带有类型的列

00:00:23.200 --> 00:00:26.330
并对表格进行命名 

00:00:27.580 --> 00:00:31.640
我们之前已讨论过文本和整数类型  现在回到第二课 

00:00:31.640 --> 00:00:36.380
我曾向大家提供了一个包含大量 SQL 支持类型的长列表 

00:00:36.380 --> 00:00:40.690
但你实际可以使用的类型集 因系统不同而不同 

00:00:40.690 --> 00:00:43.870
如果你使用的数据库系统 本身不支持所需类型 

00:00:43.870 --> 00:00:47.070
通常有一种解决方法 

00:00:47.070 --> 00:00:49.980
例如  PostgreSQL 有某种特定类型的 IP 地址 

00:00:49.980 --> 00:00:53.380
而 MySQL 却没有 

00:00:53.380 --> 00:00:58.645
MySQL 程序员通常会使用整数 或文本字符串来存储 IP 地址 

00:00:58.645 --> 00:01:02.475
关于我们在本课程中使用的数据库  PostgreSQL 具有合理的日期和时间类型 

00:01:02.475 --> 00:01:07.615
而 SQLite 实际上只是将日期存储为字符串 

00:01:07.615 --> 00:01:10.885
数据库系统 会经常提供用于

00:01:10.885 --> 00:01:12.255
声明特定列的快捷方式 

00:01:12.255 --> 00:01:16.145
例如 在 PostgreSQL 中  你的列可以存储时间和日期

00:01:16.145 --> 00:01:17.730
以及时区 

00:01:17.730 --> 00:01:21.670
这样 你就可以对记录的世界各地 不同地区的数据进行比较 

00:01:21.670 --> 00:01:26.363
这种类型的列的完整 SQL 标准名称 是 timestamp with time zone 

00:01:26.363 --> 00:01:32.710
但通过 PostgreSQL 可将其缩写为 timestamptz 

00:01:32.710 --> 00:01:36.250
通常情况下 如果你正在为 新的应用程序创建数据库 

00:01:36.250 --> 00:01:40.260
则需要事先将数据库 设为安装过程的一部分 

00:01:40.260 --> 00:01:44.010
从技术上来讲 从你的应用代码发送 创建表格命令是可行的 

00:01:44.010 --> 00:01:47.350
但在初始设置之外这样做 通常不是好主意 

00:01:47.350 --> 00:01:50.720
数据库设计是 应用代码的一部分 

00:01:50.720 --> 00:01:54.030
它只是用 SQL 而不是 Python 编写的一部分 

00:01:54.030 --> 00:01:58.250
因此 创建表格并不像 在程序变量中创建值 

00:01:58.250 --> 00:02:01.000
更像是让你的应用 重写其自己的代码 

00:02:01.000 --> 00:02:02.470
这种情况并不常见 

