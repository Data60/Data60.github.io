WEBVTT
Kind: captions
Language: ar

00:00:00.350 --> 00:00:04.070
ربما لاحظتم أن استعلامات SQL يمكن تزداد تعقيدًا
عندما

00:00:04.070 --> 00:00:06.480
تكدس العبارات والاستعلامات الفرعية.

00:00:07.480 --> 00:00:10.460
وعندما نقوم كمبرمجين بكتابة كود وتبدأ الدالة

00:00:10.460 --> 00:00:15.300
في التعقيد، نبحث عن سبل لإعادة تجزئتها إلى دوال
أصغر.

00:00:15.300 --> 00:00:18.250
حسنًا، يمكننا القيام بذلك في SQL أيضًا.

00:00:18.250 --> 00:00:20.670
يرجع كل استعلام تحديد جدولًا.

00:00:20.670 --> 00:00:23.700
لذا، يمكننا جعل قاعدة البيانات تتذكر استعلام تحديد
لنا

00:00:23.700 --> 00:00:25.640
وتجعلها متوفرة للاستعلامات اللاحقة.

00:00:25.640 --> 00:00:27.990
عند القيام بذلك، فإن هذه العملية تسمى عرض.

00:00:27.990 --> 00:00:31.000
إليكم الصيغة اللازمة لأمر إنشاء العرض.

00:00:31.000 --> 00:00:35.230
طرق العرض مفيدة بالفعل مع عمليات التجميع مثل العد
أو الجمع.

00:00:35.230 --> 00:00:39.010
على سبيل المثال، إذا كان لدينا جدول بالطلبة المسجلين
في الدورات ونريد

00:00:39.010 --> 00:00:41.590
معرفة عدد الطلاب الموجودين في كل دورة،

00:00:42.670 --> 00:00:44.970
يمكننا معرفة ذلك باستخدام عملية تجميع.

00:00:44.970 --> 00:00:49.560
لكن إذا كنا سنستخدم ذلك الاستعلام كثيرًا، يمكننا
تخزينه في أمر عرض.

00:00:49.560 --> 00:00:52.440
إن استخدام أمر عرض بدلًا من إنشاء استعلام فرعي

00:00:52.440 --> 00:00:55.900
يشبه استخدام استدعاء الدالة بدلًا من نسخ الكود.

00:00:55.900 --> 00:00:59.470
ثمة استخدام آخر لأوامر العرض وهو عرض أعمدة بعينها
فقط،

00:00:59.470 --> 00:01:01.370
من جدول يحتوي على العديد من الأعمدة.

00:01:01.370 --> 00:01:04.599
إذا كان لديكم جدول يضم 20 عمودًا ويوجد العديد من
الاستعلامات

00:01:04.599 --> 00:01:08.940
التي تشير إلى أربعة منها فقط، فإن إنشاء أمر عرض
يساعد في زيادة وضوح الكود.

00:01:08.940 --> 00:01:09.900
إليكم شيء تفكرون فيه.

00:01:09.900 --> 00:01:14.580
هل تعتقدون أن نظام قاعدة بيانات مثل PostgreSQL يجب
أن يسمح بتحديث

00:01:14.580 --> 00:01:15.820
الصفوف وحذفها في أمر عرض؟

