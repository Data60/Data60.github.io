{
  "data": {
    "lesson": {
      "id": 289580,
      "key": "3490418600",
      "title": "深入学习 SQL",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "zh-cn",
      "summary": "探索 SQL 高级功能，例如创建你自己的表格和合并。",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/3490418600/289580/1516830192566/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%20SQL%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/3490418600/289580/1516830152196/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%20SQL%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 177225,
          "key": "35586985410923",
          "title": "创建表格过程简介",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "35586985410923",
            "completed_at": "2019-02-24T04:55:39.540Z",
            "last_viewed_at": "2019-02-24T04:55:41.308Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 174955,
              "key": "3558698541",
              "title": "创建表格过程简介",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "本课参考说明：  \nhttps://udacity.atlassian.net/wiki/display/BENDH/RDB+Lesson+4+Reference+Notes",
              "video": {
                "youtube_id": "mIIL-p2gaK4",
                "china_cdn_id": "mIIL-p2gaK4.mp4"
              }
            }
          ]
        },
        {
          "id": 177228,
          "key": "35140186460923",
          "title": "规范化设计（第一部分）",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "35140186460923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 174956,
              "key": "3514018646",
              "title": "规范化设计（第一部分）",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "要详细了解规范化及其对数据库设计的帮助，请查阅 William Kent 的论文<a href=\"http://www.bkent.net/Doc/simple5.htm\" target=\"_blank\">“A Simple Guide to Five Normal Forms in Relational Database Theory”</a>（关系数据库理论中五种范式的简明指南）。",
              "video": {
                "youtube_id": "LQq5F77ANiY",
                "china_cdn_id": "LQq5F77ANiY.mp4"
              }
            }
          ]
        },
        {
          "id": 177227,
          "key": "35140186470923",
          "title": "规范化设计（第二部分）",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "35140186470923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 174957,
              "key": "3514018647",
              "title": "规范化设计（第二部分）",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "要详细了解规范化及其对数据库设计的帮助，请查阅 William Kent 的论文<a href=\"http://www.bkent.net/Doc/simple5.htm\" target=\"_blank\">“A Simple Guide to Five Normal Forms in Relational Database Theory”</a>  （关系数据库理论中五种范式的简明指南）。\n\n维基百科文章[数据库规范化](http://en.wikipedia.org/wiki/Database_normalization)尽管略简洁，但在一定程度上介绍了规范化的发展历史，以及提出这一概念的动机。\n\n将来，你可能会遇到 *反规范化* 的情况，即通过避免连接来加快数据库查询速度。这是高级主题，不属于本课程的范畴。但如果你对此感兴趣，在现代数据库系统（如 PostgreSQL）中，通常可通过[索引](http://www.postgresql.org/docs/9.4/static/sql-createindex.html)和[物化视图](http://www.postgresql.org/docs/9.4/static/sql-creatematerializedview.html)等工具达到同样的目的。",
              "video": {
                "youtube_id": "l6SDnhM7B_k",
                "china_cdn_id": "l6SDnhM7B_k.mp4"
              }
            }
          ]
        },
        {
          "id": 181256,
          "key": "35140186480923",
          "title": "哪些被规范化",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "35140186480923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 180551,
              "key": "3514018648",
              "title": "哪些被规范化",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "### 规范化表格的规则：\n\n**1. 每行都具有相同数量的列。**  \n实际上，数据库系统不允许在不同的行里具有不同数量的列。但是如果某些列有时候为空，有时候不为空，或者如果我们将多个值放入一个字段里，我们可以调整下此规则。\n\n拿动物园数据库中的 **diet** 表格为例。我们将某个物种会吃的多种食物放入多行，而不是放在一行里。这样的话，汇总和比较时就操作简单多了。\n\n**2. 表格存在唯一*键*，一行里的所有内容都围绕该键展开。**  \n键可以是一列或多列。甚至可以是整行内容，就像 **diet** 表格一样。但是一个表格里没有重复的行。\n\n更重要的是，如果我们要存储不是唯一的内容，例如人们的姓名，我们就使用唯一标识符（例如序列号）区分它们。这样可以确保我们不会将两个姓名相同的人的分数或违规停车罚单汇总到一起。\n\n**3. 与唯一键不相关的内容放在其他表格中。**  \n例如 **items** 表格，里面有条目、它们的地点和地点的街道地址。地址不是关于条目的内容，它是关于地点的内容。将地址放到另一表格里可以节省空间，并避免造成混淆，我们始终可以使用 **join** 重新组成原始表格。\n\n**4. 表格不应该暗示不存在的关系。**  \n例如 **job_skills** 表格，一行列出某人的技术技能（例如“Linux”）和某个语言技能（例如“法语”）。这样看起来就好像 Linux 技能是特定于法语，反之亦然，但现实中不是这种情况。规范化这一情况需要将技术技能和工作技能放在不同的表格里。",
              "user_state": {
                "node_key": "3514018648",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "T_LpzJl-EVE",
                  "china_cdn_id": "T_LpzJl-EVE.mp4"
                },
                "text": null
              },
              "question": {
                "title": "What's Normalized - Quiz",
                "alt_text": null,
                "background_image": "//lh4.ggpht.com/T3IN3NP8JvPVOIOfjIhvmh2iJqzQYy4NTqO4Uei78OyYfjpquIxQl-t7-TPKUyH3HF1tnd-IEQYxF9GF46s=s0#w=1440&h=812",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3514018648",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "3479838876",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check1",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.47165289900249374,
                      "y": 0.43736141906873616
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check2",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.524021976309227,
                      "y": 0.43646064301552107
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check3",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.47175031172069826,
                      "y": 0.5276815410199557
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check4",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.5255805798004988,
                      "y": 0.530349223946785
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "f1fz9cLnetM",
                  "china_cdn_id": "f1fz9cLnetM.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 181257,
          "key": "35140186510923",
          "title": "创建表格和类型",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "35140186510923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 180552,
              "key": "3514018651",
              "title": "创建表格和类型",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "有时候，你希望在应用代码里创建表格。例如，当你第一次运行应用时，这样可以很方便地设置表格。（当浏览器创建 Cookie 文件时就是这么做的。）",
              "video": {
                "youtube_id": "cjbpD7NZhAs",
                "china_cdn_id": "cjbpD7NZhAs.mp4"
              }
            }
          ]
        },
        {
          "id": 181258,
          "key": "35140186520923",
          "title": "创建和删除",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "35140186520923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 180553,
              "key": "3514018652",
              "title": "创建和删除数据库表格",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "屏幕不能一次性显示所有内容，可以在 **psql** 中尝试以下方法：\n\n* 创建一个新的数据库，叫做 **fishies**（或者其他名称）。\n* 使用 **\\c fishies** 连接到该表格，或者退出 **psql** 并运行 **psql fishies**。\n* 在新数据库中，创建一个具有两列的表格：一个 **text** 列和一个 **serial** 列。\n* 尝试对此表格运行 **insert** 语句，仅提供 **text** 列的值。（例如，滚动到此页面的底部。）\n\n----\n在 PostgreSQL 文档中查询以下命令：\n\n[Create Database](http://www.postgresql.org/docs/9.4/static/sql-createdatabase.html)  \n[Drop Database](http://www.postgresql.org/docs/9.4/static/sql-dropdatabase.html)  \n[Create Table](http://www.postgresql.org/docs/9.4/static/sql-createtable.html)  \n[Drop Table](http://www.postgresql.org/docs/9.4/static/sql-droptable.html)\n\n----\n\n你可以尝试下以下 **insert** 语句。将 *sometable* 替换为你所创建的表格的名称：\n\n**insert into *sometable* values ('This is text!');**\n\n要详细了解 <strong>serial</strong> 类型，请参阅 PostgreSQL 手册以下页面的最后一部分：\nhttp://www.postgresql.org/docs/9.4/static/datatype-numeric.html",
              "user_state": {
                "node_key": "3514018652",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "fqu1CzUY-PA",
                  "china_cdn_id": "fqu1CzUY-PA.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Creating and Dropping - Quiz",
                "alt_text": null,
                "background_image": "//lh5.ggpht.com/zWRJPiFerANJjCw1LOZ5O4hWu_6WimsnWgtI-yMjhTOTNttL-z9LO-hkY40t5Y_zizDV805Zh8t4VXZDMfI=s0#w=1440&h=811",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3514018652",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "3484649004",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text1",
                    "model": "TextInputWidget",
                    "is_text_area": true,
                    "tabindex": null,
                    "placement": {
                      "height": 0.10199556541019955,
                      "width": 0.6483790523690773,
                      "x": 0.26841100374064836,
                      "y": 0.4330654101995565
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text2",
                    "model": "TextInputWidget",
                    "is_text_area": true,
                    "tabindex": null,
                    "placement": {
                      "height": 0.10199556541019955,
                      "width": 0.6471321695760599,
                      "x": 0.27117752493765584,
                      "y": 0.6683411862527716
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "gYUX7bl6UKA",
                  "china_cdn_id": "gYUX7bl6UKA.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 181261,
          "key": "35140186550923",
          "title": "声明主键",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "35140186550923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 180554,
              "key": "3514018655",
              "title": "声明主键",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "3514018655",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "AaLIKufl_mY",
                  "china_cdn_id": "AaLIKufl_mY.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Primary Keys - Quiz",
                "alt_text": null,
                "background_image": "//lh4.ggpht.com/wz_mPWgvYGNqYkv0ufvug5Vs1Z3C6h-crMyV_ghsBY_pAv3GFeP_M8-LdmtDeszkFogro9XUIgugmDsTsTU=s0#w=1440&h=811",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3514018655",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "3526608668",
                "widgets": [
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio1",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.044,
                      "y": 0.52
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio2",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.524,
                      "y": 0.52
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio3",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.044,
                      "y": 0.73
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio4",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.524,
                      "y": 0.73
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "P1NzBPnfl2E",
                  "china_cdn_id": "P1NzBPnfl2E.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 177231,
          "key": "35140186570923",
          "title": "声明关系",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "35140186570923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 174962,
              "key": "3514018657",
              "title": "声明关系",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "1FjqstT1faI",
                "china_cdn_id": "1FjqstT1faI.mp4"
              }
            }
          ]
        },
        {
          "id": 181265,
          "key": "35140186580923",
          "title": "外键",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "35140186580923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 180560,
              "key": "3514018658",
              "title": "外键",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "3514018658",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "fnbLMcd0FGQ",
                  "china_cdn_id": "fnbLMcd0FGQ.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Foreign Keys - Quiz",
                "alt_text": null,
                "background_image": "//lh5.ggpht.com/2ZS5kc680uERMu3jJ9eHV0tyYFLvLD5ydVyn2ZUPkJUaSybIClnCMwYD3mi4VG3zXEd9ZH03EjZBGIe-nQ0=s0#w=1440&h=808",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3514018658",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "3510528803",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "",
                    "label": "",
                    "marker": "text1",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.04114713216957606,
                      "x": 0.03290601620947631,
                      "y": 0.32895648558758317
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text2",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.0399002493765586,
                      "x": 0.16377026184538654,
                      "y": 0.32840216186252774
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text3",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07538802660753881,
                      "width": 0.04114713216957606,
                      "x": 0.35290679551122195,
                      "y": 0.32916435698447893
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text4",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07317073170731707,
                      "width": 0.04114713216957606,
                      "x": 0.5046758104738155,
                      "y": 0.33235171840354766
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text5",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07317073170731707,
                      "width": 0.04114713216957606,
                      "x": 0.5993999376558603,
                      "y": 0.32798641906873616
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text6",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07538802660753881,
                      "width": 0.0399002493765586,
                      "x": 0.7081125311720698,
                      "y": 0.328090354767184
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text7",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07317073170731707,
                      "width": 0.04114713216957606,
                      "x": 0.8029925187032418,
                      "y": 0.3302730044345898
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text8",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07317073170731707,
                      "width": 0.04114713216957606,
                      "x": 0.921290523690773,
                      "y": 0.32964939024390244
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "mFPq74OMkKk",
                  "china_cdn_id": "mFPq74OMkKk.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 181260,
          "key": "35140186600923",
          "title": "自连接",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "35140186600923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 180556,
              "key": "3514018660",
              "title": "自连接",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "3514018660",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "P1aYwQhPnPQ",
                  "china_cdn_id": "P1aYwQhPnPQ.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Self Joins Exercise - Find Roommates",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "3489068869",
                "initial_code_files": [
                  {
                    "text": "#\n# Roommate Finder v0.9\n#\n# This query is intended to find pairs of roommates.  It almost works!\n# There's something not quite right about it, though.  Find and fix the bug.\n#\n\nQUERY = '''\nselect a.id, b.id, a.building, a.room\n       from residences as a, residences as b\n where a.building = b.building\n   and a.room = b.room\n order by a.building, a.room;\n'''\n\n#\n# To see the complete residences table, uncomment this query and press \"Test Run\":\n#\n# QUERY = \"select id, building, room from residences;\"\n# \n",
                    "name": "query.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "dHS0BtLFTSQ",
                  "china_cdn_id": "dHS0BtLFTSQ.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 181262,
          "key": "35760489920923",
          "title": "计算不符合条件的行",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "35760489920923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "products_sales.png",
                "uri": "https://www.udacity.com/api/nodes/3475179083/supplemental_media/products-salespng/download"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 180557,
              "key": "3576048992",
              "title": "计算不符合条件的行",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "3576048992",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": null,
                  "china_cdn_id": "null.mp4"
                },
                "text": "# 计算不符合条件的行\n\n你在此课程中之前已经多次见到如何计算单个表格的行数。对列运行 **count** 汇总函数将返回表格中的行数，或者 **group by** 子句的每个值的行数。\n\n例如，你在第 2 节课中见到了以下查询：\n\n`select count(*) from animals;`   \n*-- 返回动物园中的动物数量*\n\n`select count(*) from animals where species = ‘gorilla’;`  \n*-- 返回大猩猩的数量*\n\n`select species, count(*) from animals group by species;`  \n*-- 返回每个物种的名称和该物种的动物数量*\n\n如果你想获得 **join** 表格的数量，则更加复杂。例如我们在第 4 节课见到的以下两个表格，即商店的 **products** 和 **sales** 表格：\n\n![Products and Sales](https://storage.googleapis.com/supplemental_media/udacityu/3475179083/products_sales.png)\n\n假设我们想知道每个商品的售卖次数。也就是说，对于 **products** 表格中的每个 **sku** 值，我们想知道它出现在 **sales** 表格中的次数。我们可以运行以下查询：\n\n    select products.name, products.sku, count(*) as num\n      from products join sales\n        on products.sku = sales.sku\n      group by products.sku;\n\n但是该查询可能并不能完全获得我们希望的结果。如果特定的 **sku** 从未出售，即 **sales** 表格中没有该条目，那么该查询将根本不返回一行内容。\n\n如果想看到某行里面显示数字 0，那么我们就会失望了！\n\n但是，有一种方法可以使数据库在某行里显示 0。为此，我们需要更改此查询的两个地方：\n\n    select products.name, products.sku, count(sales.sku) as num\n      from products left join sales\n        on products.sku = sales.sku\n      group by products.sku;\n\n此查询将使 **products** 表格中每个商品各占一行，即使在 **sales** 表格中没有销量的商品亦不例外。\n\n哪里出现了变化？首先，我们使用了 **count(sales.sku)** 而不是 **count(*)**。意味着数据库将计算 **sales.sku** 有定义的行，而不是所有行。\n\n其次，我们使用了 **left join** 而不是简单的 **join**。\n\n## 那么什么是 left join 呢？\n\nSQL 支持各种连接形式。你在这门课程中之前见过的连接类型是 *inner* 连接，也是最常见的连接类型，以至于 SQL 不需要我们指明为“inner join”。\n\n第二种最常见的类型是 **left join**，它的对立面是 **right join**。“left”和“right”表示连接运算符左右两侧的表格。（上述示例中，左侧表格是 **products**，右侧表格是 **sales**。）\n\n常规 (inner) 连接仅返回两个表格中符合连接条件的行。**left join** 返回所有这些行以及*左侧*表格中有但是右侧表格中没有的行。**right join** 对*右侧*表格执行相同的操作。\n\n（正如“join”是“inner join”的简称，“left join”实际上是“left outer join”的简称。但是 SQL 只要求我们写成“left join”，输入的内容少多了，所以我们将这么写。）\n\n## 练习\n在下一页中，你将看到一个用 **count(*)** 和 inner **join** 写成的查询。请试着运行该查询，然后如上所述地更改该查询，看看结果如何！"
              },
              "question": {
                "title": "Counting What Isn't There - Quiz",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "3593528582",
                "initial_code_files": [
                  {
                    "text": "-- Here are two tables describing bugs found in some programs.\n-- The \"programs\" table gives the name of each program and the files\n-- that it's made of.  The \"bugs\" table gives the file in which each\n-- bug was found.\n--\n-- create table programs (\n--    name text,\n--    filename text\n-- );\n-- create table bugs (\n--    filename text,\n--    description text,\n--    id serial primary key\n-- );\n--\n-- The query below is intended to count the number of bugs in each\n-- program. But it doesn't return a row for any program that has zero\n-- bugs. Try running it as it is.  Then change it so that the results\n-- will also include rows for the programs with no bugs.  These rows\n-- should have a 0 in the \"bugs\" column.\n\nselect programs.name, count(*) as num\n   from programs join bugs\n        on programs.filename = bugs.filename\n   group by programs.name\n   order by num;\n",
                    "name": "query.sql"
                  }
                ]
              },
              "answer": {
                "text": "# Counting what isn't there - Solution\n\nHere's the original query from the quiz again —\n\n<pre>\nselect programs.name, count(*) as num\n       from programs join bugs\n         on programs.filename = bugs.filename\n       group by programs.name\n       order by num;\n</pre>\n\nAnd here's one possible corrected version:\n\n<pre>\nselect programs.name, count(bugs.filename) as num\n       from programs left join bugs\n         on programs.filename = bugs.filename\n       group by programs.name\n       order by num;\n</pre>\n\nSomething to watch out for: What do you put in the <strong>count</strong> aggregation? If you leave it as <strong>count(*)</strong> or use a column from the <strong>programs</strong> table, your query will count entries that don't have bugs as well as ones that do.\n\nIn order to correctly report a zero for programs that don't have any entries in the <strong>bugs</strong> table, you have to use a column from the <strong>bugs</strong> table as the argument to <strong>count</strong>. For instance, <strong>count(bugs.filename)</strong> will work, and so will <strong>count(bugs.description)</strong>.",
                "video": {
                  "youtube_id": null,
                  "china_cdn_id": "null.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 181259,
          "key": "35140186620923",
          "title": "子查询",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "35140186620923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 180558,
              "key": "3514018662",
              "title": "子查询",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "PostgreSQL 文档中还介绍了其他形式的子查询：\n\n[Scalar 子查询](http://www.postgresql.org/docs/9.4/static/sql-expressions.html#SQL-SYNTAX-SCALAR-SUBQUERIES)  \n[子查询表达式](http://www.postgresql.org/docs/9.4/static/functions-subquery.html)  \n[FROM 子句](http://www.postgresql.org/docs/9.4/static/sql-select.html#SQL-FROM)",
              "video": {
                "youtube_id": "7G24LiGgmGI",
                "china_cdn_id": "7G24LiGgmGI.mp4"
              }
            }
          ]
        },
        {
          "id": 181263,
          "key": "35140186630923",
          "title": "一个查询，而不是两个",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "35140186630923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 180559,
              "key": "3514018663",
              "title": "一个查询，而不是两个",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "在此查询中，SQLite 不需要提供表格别名（即 <strong>as subq</strong> 部分）。但是 PostgreSQL 需要，其他数据库系统可能需要。\n\n详情请参阅 [PostgreSQL 文档](http://www.postgresql.org/docs/9.4/static/queries-table-expressions.html#QUERIES-SUBQUERIES)。",
              "user_state": {
                "node_key": "3514018663",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "n7v-y8UrVJ0",
                  "china_cdn_id": "n7v-y8UrVJ0.mp4"
                },
                "text": null
              },
              "question": {
                "title": "One Query, Not Two - Quiz",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "3489818744",
                "initial_code_files": [
                  {
                    "text": "# Find the players whose weight is less than the average.\n# \n# The function below performs two database queries in order to find the right players.\n# Refactor this code so that it performs only one query.\n#\n\ndef lightweights(cursor):\n    \"\"\"Returns a list of the players in the db whose weight is less than the average.\"\"\"\n    cursor.execute(\"select avg(weight) as av from players;\")\n    av = cursor.fetchall()[0][0]  # first column of first (and only) row\n    cursor.execute(\"select name, weight from players where weight < \" + str(av))\n    return cursor.fetchall()\n",
                    "name": "query.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "_c_chcNiHyo",
                  "china_cdn_id": "_c_chcNiHyo.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 181266,
          "key": "35140186650923",
          "title": "视图",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "35140186650923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 180561,
              "key": "3514018665",
              "title": "视图",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "3514018665",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "t_ZSrov187k",
                  "china_cdn_id": "t_ZSrov187k.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Views - Quiz",
                "alt_text": null,
                "background_image": "//lh6.ggpht.com/nwgyEFkyP3lFijzSY1cDAYQq78JSI42X7dlR1mzJKjNVwSmbdnbottDH7V_lG3Oq89BDvJaufr5Omk34IK7t=s0#w=1280&h=720",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3514018665",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "3515748857",
                "widgets": [
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio1",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.16688746882793018,
                      "y": 0.39048641906873616
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio2",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.16636144014962592,
                      "y": 0.5416782150776053
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio3",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.1674719451371571,
                      "y": 0.684555155210643
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "omL8MVZjLts",
                  "china_cdn_id": "omL8MVZjLts.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 181264,
          "key": "35200787150923",
          "title": "总结",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "35200787150923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 180562,
              "key": "3520078715",
              "title": "总结",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "BRIvehTxQII",
                "china_cdn_id": "BRIvehTxQII.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    }
  ]
}