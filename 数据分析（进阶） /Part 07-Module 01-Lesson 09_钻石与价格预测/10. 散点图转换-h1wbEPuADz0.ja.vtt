WEBVTT
Kind: captions
Language: ja

00:00:00.240 --> 00:00:03.500
変数とダイヤモンドの総需要について

00:00:03.500 --> 00:00:06.530
理解が深まったと思います
データを再プロットしてみましょう

00:00:06.530 --> 00:00:09.570
価格をlog10目盛にしました　このようになります

00:00:09.570 --> 00:00:11.500
前よりも見やすくなりました

00:00:11.500 --> 00:00:15.830
対数目盛では横軸の右端において
価格の分散は小さいようです

00:00:15.830 --> 00:00:18.110
でももっと分かりやすくできます

00:00:18.110 --> 00:00:20.000
より体積の大きいダイヤモンドに

00:00:20.000 --> 00:00:23.000
キズが生じる確率は指数関数的に
増えるだろうという私たちの推測を踏まえて

00:00:23.000 --> 00:00:24.860
カラットの立方根を使います

00:00:24.860 --> 00:00:27.000
体積の単位は3条のオーダーです

00:00:27.000 --> 00:00:30.730
カラットの変数に変換する関数が必要です

00:00:30.730 --> 00:00:33.290
R言語の関数の書き方を勉強したい場合は

00:00:33.290 --> 00:00:35.830
インストラクターノートのリンクから確認してください

00:00:35.830 --> 00:00:38.840
たくさんのコードが書いてありますが
新しいものはこれだけです

00:00:38.840 --> 00:00:42.240
cuberoot＿trans関数です

00:00:42.240 --> 00:00:46.100
入力の値の立方根をとる関数です

00:00:46.100 --> 00:00:49.950
図を正しく表示する必要があるので

00:00:49.950 --> 00:00:52.310
操作を取り消す働きをするinverse関数も用意します

00:00:52.310 --> 00:00:55.380
ggplotコマンドに戻ります

00:00:55.380 --> 00:01:01.200
scale＿x＿continuous引数を使って

00:01:01.200 --> 00:01:04.810
x軸をcuberoot＿trans関数で変換します

00:01:04.810 --> 00:01:11.000
y軸も前にお話した
log10 transformationで変換します

00:01:11.000 --> 00:01:13.080
どうなるでしょうか

00:01:13.080 --> 00:01:14.970
図を見てみましょう

00:01:14.970 --> 00:01:17.150
この目盛でデータを表すために使った変換で

00:01:17.150 --> 00:01:19.930
見ることができます

00:01:19.930 --> 00:01:22.310
ほぼ線形に見えます
次に進みましょう

00:01:22.310 --> 00:01:25.500
線形モデルを使った
データのモデル化について見ていきます

