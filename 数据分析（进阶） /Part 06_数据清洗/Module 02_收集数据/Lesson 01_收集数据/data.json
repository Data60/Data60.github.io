{
  "data": {
    "lesson": {
      "id": 432814,
      "key": "96402d84-c99d-4982-9edf-2430ef30d222",
      "title": "收集数据",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "zh-cn",
      "summary": "利用 Python 收集各种来源和各种文件格式的数据。 本课的数据集，包含烂番茄评分(Rotten Tomatoes)，罗杰·艾伯特评论 (Roger Ebert reviews) 和维基百科电影海报图片。\n",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://s3.amazonaws.com/zips.udacity-data.com/96402d84-c99d-4982-9edf-2430ef30d222/432814/1544432923714/%E6%94%B6%E9%9B%86%E6%95%B0%E6%8D%AE+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://s3.amazonaws.com/zips.udacity-data.com/96402d84-c99d-4982-9edf-2430ef30d222/432814/1544432915320/%E6%94%B6%E9%9B%86%E6%95%B0%E6%8D%AE+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 432766,
          "key": "08f5b8b5-6f04-4977-bf83-917b3878cb94",
          "title": "简介",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "08f5b8b5-6f04-4977-bf83-917b3878cb94",
            "completed_at": "2019-02-24T15:04:55.262Z",
            "last_viewed_at": "2019-03-10T23:12:50.150Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432576,
              "key": "bfa238ea-298d-4036-9712-0fda51708dcb",
              "title": "简介",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "XtJN72lBo94",
                "china_cdn_id": "XtJN72lBo94.mp4"
              }
            }
          ]
        },
        {
          "id": 432776,
          "key": "920c87c2-9b7b-4792-bd01-04c81376dc12",
          "title": "课程大纲",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "920c87c2-9b7b-4792-bd01-04c81376dc12",
            "completed_at": "2019-02-28T09:21:12.594Z",
            "last_viewed_at": "2019-03-10T23:14:11.355Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432622,
              "key": "8207ff7b-ebff-4172-8d05-b202222c458d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 课程大纲\n\n>数据整理过程：\n- 收集（本课内容）\n- 评估\n- 清理\n\n**收集**数据是数据整理的第一步。收集之前，我们没有数据，但之后，我们就有了。\n\n收集数据因项目而异。有时你只是给出数据，或像我在整个课程中一样，给你数据。有时需要搜索项目的正确数据。有时候，又没有所需要的数据，所以需要以某种方式生成数据。如果找到数据后，发现将其分散在多种不同的来源和文件格式中时与往常不一样，那么在编程环境中组织数据就会很麻烦。\n\n由于这些原因或其他原因，收集数据可能会比较麻烦。在这节课中，这可能是课程最具技术性挑战的内容，你需要具备各种编码技能和一般技能，克服将来收集数据时可能会遇到的大部分问题。这有时候会很困难，不过没关系，好好坚持，也可以随时向我们寻求帮助。\n\n**这节课的结构如下：**\n\n- 首先，我们提出几个问题。\n- 然后，你将研究每个数据的来源，并回答这些问题，每个数据的来源和格式都不同。\n- 然后，将了解每种文件格式的结构。\n- 然后，将学习如何使用 Python 及其库来处理这种文件格式。\n- 最后，将实际收集每个数据，以便于以后在此基础上创建主数据集。",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432780,
          "key": "af4d6ffa-f012-44fc-9fb4-219f29cf9247",
          "title": "数据集：寻找最好的电影",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "af4d6ffa-f012-44fc-9fb4-219f29cf9247",
            "completed_at": "2019-02-28T09:21:57.974Z",
            "last_viewed_at": "2019-03-10T23:16:24.117Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432626,
              "key": "01f67db8-63a8-48fa-ae10-2cb06e1f85c3",
              "title": "寻找最好的电影",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "- [Rotten Tomatoes：前 100 部热门电影](https://www.rottentomatoes.com/top/bestofrt/)\n - 注：当前列表可能与这节课中使用的最新归档列表不同\n- [RogerEbert.com](http://www.rogerebert.com/)\n- [Andreas Mueller: Word Cloud Generator in Python](https://amueller.github.io/word_cloud/)",
              "video": {
                "youtube_id": "aq3qM2EkwrI",
                "china_cdn_id": "aq3qM2EkwrI.mp4"
              }
            }
          ]
        },
        {
          "id": 432772,
          "key": "b674f69b-d097-4144-aa35-9e67597a175b",
          "title": "浏览工作目录和文件 I/O",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b674f69b-d097-4144-aa35-9e67597a175b",
            "completed_at": "2019-02-28T09:25:42.470Z",
            "last_viewed_at": "2019-03-10T23:19:51.405Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432577,
              "key": "566b97e6-3346-4ab6-8776-bd9a90c352b0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 浏览自己的工作目录和文件 I/O\n继续进行这节课之前，请确保可以在 Python 中顺利使用计算机的命令行界面来访问文件和文件夹，以及可以正常读取和写入文件（也就是文件 I/O 的一部分或输入/输出）。这些操作看似简单，但实践起来非常困难。\n\n### 命令行\n\n对于命令行界面，下面是我建议的三个较好的资源。选择最适合自己的资源：\n- 我们的简短 [Linux 命令行基础知识](https://www.udacity.com/course/linux-command-line-basics--ud595) 课程（适用于 Linux 和 Mac 用户）\n- [导航终端：简单介绍](https://computers.tutsplus.com/tutorials/navigating-the-terminal-a-gentle-introduction--mac-3855)（适用于 Mac 用户）（讲师：Marius Masalar）\n- [命令提示 - 如何使用简单的基本命令](http://www.digitalcitizen.life/command-prompt-how-use-basic-commands)（适用于 Windows 用户）（讲师：Codrut Neagu）",
              "instructor_notes": ""
            },
            {
              "id": 432590,
              "key": "a54591db-bd3a-4dee-b715-d2c425b923d9",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59cb1a3b_cl/cl.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a54591db-bd3a-4dee-b715-d2c425b923d9",
              "caption": "",
              "alt": "命令行标志",
              "width": 1200,
              "height": 1200,
              "instructor_notes": null
            },
            {
              "id": 432591,
              "key": "9d3b5bab-49f8-47cc-ac20-4670e0061cb7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 文件 I/O\n用于在 Python 中读取和写入文件：\n- [Python 简介 (Introduction to Python Programming)](https://classroom.udacity.com/courses/ud1110) 这门免费课程中的第 5 课（“文件和模块”）中的“从文件读取”页面\n\n如果对上面的课程熟悉，可随意跳过这些资源，继续学习这节课程。\n",
              "instructor_notes": ""
            },
            {
              "id": 432598,
              "key": "b6160825-e01d-417a-82e1-09fa8f67a356",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59cb1ba6_file-logo/file-logo.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b6160825-e01d-417a-82e1-09fa8f67a356",
              "caption": "",
              "alt": "文件标志",
              "width": 1200,
              "height": 1200,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 432773,
          "key": "beb179b7-41e5-4e93-8bb5-24cf3800bb62",
          "title": "资料来源：手头文件",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "beb179b7-41e5-4e93-8bb5-24cf3800bb62",
            "completed_at": "2019-02-28T09:26:07.850Z",
            "last_viewed_at": "2019-03-10T23:26:41.306Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432599,
              "key": "ab03c977-2413-47c9-9373-1d72f91bbb73",
              "title": "资料来源：手头文件",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "-  [Rotten Tomatoes：前 100 部热门电影 TSV 文件](https://raw.githubusercontent.com/udacity/new-dand-advanced-china/master/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/bestofrt.tsv)\n*（注：Jupyter Notebook 工作区提供这个文件，所以如果需要，可在学习完 Udacity 课程后下载此文件）*\n\n*注：可以编程的方式从某些公司的文件存储系统（如 Google Drive）下载一些数据库的内部数据，但这通常比下载网页上托管的文件麻烦一些。但在实际操作中，通常不以编程方式下载内部文件，用于整理和分析/可视化/建模。*",
              "video": {
                "youtube_id": "PjP-EaeXTiY",
                "china_cdn_id": "PjP-EaeXTiY.mp4"
              }
            }
          ]
        },
        {
          "id": 432777,
          "key": "042b7d1a-a644-4b22-b324-9b93617cfbc8",
          "title": "平面文件结构",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "042b7d1a-a644-4b22-b324-9b93617cfbc8",
            "completed_at": "2019-02-28T09:27:20.807Z",
            "last_viewed_at": "2019-03-10T23:27:34.701Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432600,
              "key": "ff523ccd-6f72-4c9e-ac99-afa1e4952ed3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 平面文件结构",
              "instructor_notes": ""
            },
            {
              "id": 432601,
              "key": "7f44ef26-5815-442a-80d4-c9d0db3c2f77",
              "title": "平面文件结构",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "bLKVRIhrZUY",
                "china_cdn_id": "bLKVRIhrZUY.mp4"
              }
            },
            {
              "id": 432602,
              "key": "0c326f46-4ecd-4229-b9aa-b95611c9d572",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "平面文件包含明文格式的表格数据，每行一个数据记录，每个记录或行有一个或多个字段。这些字段由分隔符，如逗号、制表符或冒号分隔。\n\n**平面文件**的优点包括：\n- 属于文本文件，因此可以读取。\n- 轻巧。\n- 简单易懂。\n- 可以读/写文本文件的软件随处可见，如文本编辑器。\n- 特别适用于小型数据集。\n\n**平面文件的缺点**，例如与关系数据库相比，包括：\n- 缺乏标准。\n- 数据冗余。\n- 共享数据可能很麻烦。\n- 不太适用于大型数据集（请在*更多信息* 中单击 Cornell 链接，查阅*”小数据集何时升级为大数据集？\"*）。\n\n## 练习\n下面的文件是平面文件吗？在下面的练习中，将“是”或“否”与每个文件编号搭配起来。\n\n### 文件＃1：animals.csv",
              "instructor_notes": ""
            },
            {
              "id": 432607,
              "key": "6ac5779c-6c0b-4678-9b14-6a3146f1faea",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ca635b_screenshot-2017-09-26-10.21.06/screenshot-2017-09-26-10.21.06.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6ac5779c-6c0b-4678-9b14-6a3146f1faea",
              "caption": "",
              "alt": "",
              "width": 648,
              "height": 464,
              "instructor_notes": null
            },
            {
              "id": 432608,
              "key": "54f7fb87-6489-41bf-8688-2d8eceb3b74a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 文件 ＃2：animals.tsv",
              "instructor_notes": ""
            },
            {
              "id": 432611,
              "key": "3432faf1-9fbd-4595-adb0-235cfa6a04d9",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ca635c_screenshot-2017-09-26-10.20.14/screenshot-2017-09-26-10.20.14.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3432faf1-9fbd-4595-adb0-235cfa6a04d9",
              "caption": "",
              "alt": "",
              "width": 632,
              "height": 462,
              "instructor_notes": null
            },
            {
              "id": 432612,
              "key": "213d6e1f-aa52-41e7-8e43-a508f0f33a9c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 文件 ＃3：animals.txt",
              "instructor_notes": ""
            },
            {
              "id": 432613,
              "key": "eb4b4a85-0501-4772-9b5b-bc4326e4d3f2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ca635a_screenshot-2017-09-26-10.23.17/screenshot-2017-09-26-10.23.17.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/eb4b4a85-0501-4772-9b5b-bc4326e4d3f2",
              "caption": "",
              "alt": "",
              "width": 880,
              "height": 380,
              "instructor_notes": null
            },
            {
              "id": 432617,
              "key": "d7d132f0-2daa-4f7d-928a-862020227f9f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 文件 ＃4：animals.txt",
              "instructor_notes": ""
            },
            {
              "id": 432619,
              "key": "60859ec7-c115-44fc-b69a-76eff721e9cb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ca6358_screenshot-2017-09-26-10.24.41/screenshot-2017-09-26-10.24.41.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/60859ec7-c115-44fc-b69a-76eff721e9cb",
              "caption": "",
              "alt": "",
              "width": 614,
              "height": 463,
              "instructor_notes": null
            },
            {
              "id": 432620,
              "key": "463c4f5b-1e3d-48a2-a8b7-46368af575a9",
              "title": "这些是平面文件吗？",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "463c4f5b-1e3d-48a2-a8b7-46368af575a9",
                "completed_at": "2019-02-28T10:00:23.860Z",
                "last_viewed_at": "2019-03-10T23:29:02.949Z",
                "unstructured": "{\"answer_ids\":[\"a1506434905692\",\"a1506434958120\",\"a1506434991711\",\"a1506434951550\"],\"is_correct\":true}"
              },
              "question": {
                "complex_prompt": {
                  "text": "上面的文件是平面文件吗？"
                },
                "concepts_label": "文件",
                "answers_label": "平面文件?",
                "concepts": [
                  {
                    "text": "#1: animals.csv",
                    "correct_answer": {
                      "id": "a1506434905692",
                      "text": "是"
                    }
                  },
                  {
                    "text": "#2: animals.tsv",
                    "correct_answer": {
                      "id": "a1506434951550",
                      "text": "是"
                    }
                  },
                  {
                    "text": "#3 animals.txt",
                    "correct_answer": {
                      "id": "a1506434955226",
                      "text": "否"
                    }
                  },
                  {
                    "text": "#4 animals.txt",
                    "correct_answer": {
                      "id": "a1506434958120",
                      "text": "是"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1506434951550",
                    "text": "是"
                  },
                  {
                    "id": "a1506434905692",
                    "text": "是"
                  },
                  {
                    "id": "a1506434991711",
                    "text": "否"
                  },
                  {
                    "id": "a1506434958120",
                    "text": "是"
                  },
                  {
                    "id": "a1506434985315",
                    "text": "是"
                  },
                  {
                    "id": "a1506434981825",
                    "text": "否"
                  },
                  {
                    "id": "a1506434987931",
                    "text": "否"
                  },
                  {
                    "id": "a1506434955226",
                    "text": "否"
                  }
                ]
              }
            },
            {
              "id": 432621,
              "key": "b70f9bb1-f1bc-4b25-8084-3cc0b2e6a2fe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "##  更多信息\n- [教授 Excel：XML 和 ZIP：浏览你的 Excel 工作簿文件结构\n](http://professor-excel.com/xml-zip-excel-file-structure/)\n- [Cornell：关系数据库 - 非父系平面文件](https://www.cac.cornell.edu/education/Training/DataAnalysis/RelationalDatabases.pdf)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432781,
          "key": "18c2d273-19d8-44e2-bab4-d438100780ca",
          "title": "Python 中的平面文件",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "18c2d273-19d8-44e2-bab4-d438100780ca",
            "completed_at": "2019-02-28T10:05:01.649Z",
            "last_viewed_at": "2019-03-10T23:34:13.803Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432627,
              "key": "1443cc3f-84d2-4755-ac8a-10847b484e8f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Python 中的平面文件\n\n由于平面文件是可读的，你可以轻松编写自己的代码来解析或使用基本 Python 来理解这些文件。打开文件，逐行阅读文本，使用分隔符分隔每行内容，并将所有内容存储在你选择的数据结构中。但其他人在我们之前解决了这个问题，并创建了具有大量附加功能的库，尤其适用于数据整理、分析和可视化。\n\n输入 [pandas](http://pandas.pydata.org/)。pandas 是目前 Python 中用于数据处理的标准和最佳方法。它几乎可以处理所有能想象到的文件类型，尤其适合表格数据。将逗号分隔的数据读入 DataFrame 的代码非常简单。\n\n```python\nimport pandas as pd\ndf = pd.read_csv('bestofrt.csv')\n```\n\n但是我给你的文件是一个 TSV 文件，不过没关系，由于平面文件没有明确的标准，pandas 有一个主要的解析功能，就是 `read_csv`。这是 [文档](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html) 链接。`read_csv` 也可以解析 TSV 文件。只需要更改参数，就可以适合具体用例，例如更改分隔符参数 (*sep*)，或者是否引用条目等。\n\n## 练习\n\n在下面的 Jupyter Notebook 中，将“前 100 部热门电影 TSV 文件” ('bestofrt.tsv')导入 pandas DataFrame。*提示：在 `read_csv` 文档中的 * sep * 参数中读取。*\n",
              "instructor_notes": ""
            },
            {
              "id": 478674,
              "key": "e5a3eb45-3141-42b9-9243-425504af9081",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewe36b7372",
              "pool_id": "jupyter",
              "view_id": "e36b7372-fe51-43ec-af3e-0125d013a168",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/gathering-zh.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 432629,
              "key": "340a174b-dfd7-41d4-9c71-08ee8dcdae76",
              "title": "练习：导入平面文件",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "340a174b-dfd7-41d4-9c71-08ee8dcdae76",
                "completed_at": "2019-03-10T23:38:40.202Z",
                "last_viewed_at": "2019-03-10T23:38:40.202Z",
                "unstructured": "{\"answer\":\"df = pd.read_csv('bestofrt.tsv',sep='\\\\t')\",\"is_correct\":true}"
              },
              "question": {
                "prompt": "在上面的 Jupyter Notebook 中运行代码，然后复制并粘贴 `read_csv` 语句，将 TSV 文件导入到以 `df =` 开头的 pandas DataFrame 中。",
                "matchers": [
                  {
                    "expression": "^\\s*df\\s*=\\s*pd.read_csv\\(\\s*'bestofrt\\.tsv'\\s*,\\s*sep\\s*=\\s*'\\\\t'\\s*\\)\\s*$"
                  },
                  {
                    "expression": "^\\s*df\\s*=\\s*pd.read_csv\\(\\s*\"bestofrt\\.tsv\"\\s*,\\s*sep\\s*=\\s*'\\\\t'\\s*\\)\\s*$"
                  },
                  {
                    "expression": "^\\s*df\\s*=\\s*pd.read_csv\\(\\s*\"bestofrt\\.tsv\"\\s*,\\s*sep\\s*=\\s*\"\\\\t\"\\s*\\)\\s*$"
                  },
                  {
                    "expression": "^\\s*df\\s*=\\s*pd.read_csv\\(\\s*'bestofrt\\.tsv'\\s*,\\s*sep\\s*=\\s*\"\\\\t\"\\s*\\)\\s*$"
                  }
                ]
              }
            },
            {
              "id": 432632,
              "key": "ddd97906-71b6-4c35-8ab8-a283b5a213ff",
              "title": "Flat Files in Python ",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "cUmcLjWgxwM",
                "china_cdn_id": "cUmcLjWgxwM.mp4"
              }
            },
            {
              "id": 432639,
              "key": "5d84299b-9eef-4b3f-bc11-f5a53ddcbab9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " ## 更多信息\n - [pandas：平面文件功能](https://pandas.pydata.org/pandas-docs/stable/api.html#flat-file)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432782,
          "key": "c6b16c06-1e05-46c9-b4d2-c36c480e42f4",
          "title": "资料来源：Web 数据抓取",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c6b16c06-1e05-46c9-b4d2-c36c480e42f4",
            "completed_at": "2019-02-28T10:18:03.277Z",
            "last_viewed_at": "2019-03-10T23:39:28.392Z",
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "Rt-Html",
                "uri": "https://s3.amazonaws.com/video.udacity-data.com/topher/2018/June/5b2b57c4_rt-html/rt-html.zip"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 432640,
              "key": "0f917d00-389e-416e-9f86-ffe72af71565",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 资料来源：Web 数据抓取\n### 简介",
              "instructor_notes": ""
            },
            {
              "id": 432641,
              "key": "2aae7d7d-c9c5-42e2-a23f-ded26902dfa8",
              "title": "资料来源：网页抓取",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ZqTad6Usf9g",
                "china_cdn_id": "ZqTad6Usf9g.mp4"
              }
            },
            {
              "id": 432642,
              "key": "1cf10677-a463-4f7e-a6dc-8501acd366cd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " - [Rotten Tomatoes: E.T. 外星人 (1982)](https://www.rottentomatoes.com/m/et_the_extraterrestrial)\n - [Beautiful Soup](https://www.crummy.com/software/BeautifulSoup/)\n\n### 保存 HTML",
              "instructor_notes": ""
            },
            {
              "id": 432643,
              "key": "c276c286-9b6b-44ef-bd47-8e2d898f1b62",
              "title": "Scraping Webpages ",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "bAeGbBBAIkE",
                "china_cdn_id": "bAeGbBBAIkE.mp4"
              }
            },
            {
              "id": 432649,
              "key": "5436246b-8589-4896-9a8f-c828af11f8b7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "使用 HTML 文件的两个主要方法是：\n- 将 HTML 文件保存到计算机中（例如使用 [Requests](http://docs.python-requests.org/en/master) 库），并将文件读入 [`BeautifulSoup`](https://www.crummy.com/software/BeautifulSoup/) 构造函数中\n- 将 HTML 响应内容直接读入 `BeautifulSoup` 构造函数（例如再次使用 Requests 库）\n\n我们一会儿将在“从互联网下载文件”中学习此请求代码在后台的运行原理。\n\n在这节课中你不用执行这些操作。我已经下载了所有 Rotten Tomatoes HTML 文件，并将它们放在 Udacity 教室的 Jupyter notebook 中一个名为* rt_html *的文件夹里。如果你想在课程结束后操作，请下载 [这个 zip 文件](https://s3.amazonaws.com/video.udacity-data.com/topher/2018/June/5b2b57c4_rt-html/rt-html.zip)，并解压* rt_html *文件夹。我建议你在自己首选的文本编辑器（例如 [Sublime](https://www.sublimetext.com/)，这应该是免费软件，可以打开 HTML 文件），查看此前练习的 HTML。\n\n*rt_html* 文件夹包含前 100 部热门电影的 Rotten Tomatoes HTML 列表，这也是这节课最新更新的列表。我会给你提供这些历史文件，因为评分会随着时间的推移而改变，从而导致与录制的课程视频不一致。此外，我们知道网页的 HTML 也会随时间发生变化。重新设计网页时，抓取代码很容易被更改，这使得数据抓取容易出错，所以不推荐长期项目使用。所以只需使用提供给你们的这些 HTML 文件，并用上述任一方法保存它们。\n\n### 更多信息\n- [面向数据科学：Web 抓取数据的伦理](https://medium.com/towards-data-science/ethics-in-web-scraping-b96b18136f01)\n- [David Venturi：屏幕抓取是第一个让我对编程感兴趣的“神奇”功能](https://twitter.com/venturidb/status/734757220525715456) （注： 该页面需要 VPN 访问）\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432784,
          "key": "633032a1-8f0f-4437-95a5-3ac4b47e30bb",
          "title": "HTML 文件结构",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "633032a1-8f0f-4437-95a5-3ac4b47e30bb",
            "completed_at": "2019-02-28T10:21:59.530Z",
            "last_viewed_at": "2019-03-10T23:55:56.669Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432650,
              "key": "d446601e-f69e-426e-b633-05b812e0789d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## HTML 文件结构\n\n超文本标记语言（或 HTML）是为万维网创建文档的语言。\n\n我们来看看 [Cameron Pittman](https://github.com/cameronwp)，Udacity 中的讲师和全栈工程师，他主要介绍了 HTML 文件的基本结构。观看下面三个简短的视频，了解开始 Web 数据抓取所需的全部知识。如果想了解更多信息，或者想要扩大自己的知识面，可以查看 Cameron 的 \"HTML 和 CSS 简介\" 课程。请单击 [此处](https://www.udacity.com/course/intro-to-html-and-css--ud304)。\n\n按照视频介绍的方法操作时，打开你在文本编辑器（如 Sublime）中下载的一个 HTML 文件，并在 Cameron 作为样例的 HTML 文档中找到相似之处。我们稍后将进行这些操作。\n",
              "instructor_notes": ""
            },
            {
              "id": 432651,
              "key": "4ddeb3e2-5684-4616-a517-c50d35e436fc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### HTML 结构",
              "instructor_notes": ""
            },
            {
              "id": 432652,
              "key": "b819b438-254f-4957-8b4a-6fcf707bafd9",
              "title": "HTML 结构",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "UjCbXQ8Coic",
                "china_cdn_id": "UjCbXQ8Coic.mp4"
              }
            },
            {
              "id": 432656,
              "key": "a3e93dec-7805-409e-8c59-3970571a79ad",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 树",
              "instructor_notes": ""
            },
            {
              "id": 432658,
              "key": "78296773-6dd0-4706-8c76-a12e6266313a",
              "title": "树",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "OVeJU18ADmw",
                "china_cdn_id": "OVeJU18ADmw.mp4"
              }
            },
            {
              "id": 432659,
              "key": "b8a387df-befe-4ba7-a691-8753b2ed632f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### HTML 和树",
              "instructor_notes": ""
            },
            {
              "id": 432660,
              "key": "34886557-49bd-482f-a64c-1e7433353f92",
              "title": "HTML and Trees",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "766JMEtZCPE",
                "china_cdn_id": "766JMEtZCPE.mp4"
              }
            },
            {
              "id": 432663,
              "key": "c90cd4fc-fc79-4d90-b0fa-6bc11d9d6878",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 烂番茄 HTML",
              "instructor_notes": ""
            },
            {
              "id": 432664,
              "key": "9d976817-9de1-4d9f-a671-c863ab9763df",
              "title": "HTML 文件结构",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "4ef_Dr_SXTw",
                "china_cdn_id": "4ef_Dr_SXTw.mp4"
              }
            },
            {
              "id": 432665,
              "key": "2951d666-2800-4e77-9fbd-605b10100e66",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### HTML 文件结构练习\n以下是 [ET The Extra-Terrestrial Rotten Tomatoes 页面](https://www.rottentomatoes.com/m/et_the_extraterrestrial)的 HTML 代码归档段。该代码段包含 'AUDIENCE SCORE' 文本，但没有进行格式处理（可以在右下角的文件预览中看到）。\n",
              "instructor_notes": ""
            },
            {
              "id": 432666,
              "key": "609a71f0-7961-4774-9ebc-df5593330a2c",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewa3ae8423",
              "pool_id": "webterminal",
              "view_id": "a3ae8423-f98d-4396-8eb0-cc1952fa8fd3",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "openFiles": [
                      "/home/workspace/audience_score.html"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "previewFile": "/home/workspace/audience_score.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 432667,
              "key": "6f1d31d8-fd24-4e7d-8801-1f3e8b702975",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6f1d31d8-fd24-4e7d-8801-1f3e8b702975",
                "completed_at": "2019-02-28T10:53:55.182Z",
                "last_viewed_at": "2019-03-11T00:06:26.887Z",
                "unstructured": "{\"selected_id\":\"a1506360079848\",\"is_correct\":true}"
              },
              "question": {
                "prompt": "72% 的观众评分这一信息位于下列哪一个 HTML 标签里面？",
                "answers": [
                  {
                    "id": "a1506360070390",
                    "text": "div",
                    "is_correct": false
                  },
                  {
                    "id": "a1506360078536",
                    "text": "h3",
                    "is_correct": false
                  },
                  {
                    "id": "a1506360079848",
                    "text": "span",
                    "is_correct": true
                  },
                  {
                    "id": "a1506360080387",
                    "text": "a",
                    "is_correct": false
                  },
                  {
                    "id": "a1506360080999",
                    "text": "p",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 432787,
          "key": "390131d9-42ab-48ca-880e-d3f33523c20d",
          "title": " Python 中的 HTML 文件",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "390131d9-42ab-48ca-880e-d3f33523c20d",
            "completed_at": "2019-02-28T10:54:05.241Z",
            "last_viewed_at": "2019-03-11T00:06:31.728Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432668,
              "key": "4bf41078-df1c-4994-a52b-e17420b2a76c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "##  Python 中的 HTML 文件",
              "instructor_notes": ""
            },
            {
              "id": 432669,
              "key": "13655350-d8c9-44cd-bab7-fca3c5066ee4",
              "title": "Python 中的 HTML 文件 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "0VZumC18UvQ",
                "china_cdn_id": "0VZumC18UvQ.mp4"
              }
            },
            {
              "id": 432670,
              "key": "583258df-1d5b-49ea-bcd7-32ca64dc1777",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 练习\n根据对 HTML 文件结构的了解，你将使用 [Beautiful Soup](https://www.crummy.com/software/BeautifulSoup/) 来提取对于每个 HTML 文件，我们所需的观众评分指标和观众评分得数，以及上面视频中的电影标题（所以我们稍后将合并数据集），然后将它们保存在 pandas DataFrame 中。\n\n下面的 Jupyter Notebook 包含以下模板代码：\n- 创建一个空列表* df_list *，并附加字典。这个词典列表最终将被转换为 pandas DataFrame（这是 [逐行构建 DataFrame 的最有效方式](https://stackoverflow.com/a/28058264))。\n- 通过 *rt_html* 文件夹中每个电影的 Rotten Tomatoes HTML 文件循环播放。\n- 打开每个 HTML 文件，并将其传达到一个名为 *file* 的文件句柄中。\n- 通过使用 [`pd.DataFrame` 构造函数](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html) 转换 * df_list * 来创建名为 * df * 的 DataFrame。\n\n你的任务是提取每个 HTML 文件的标题（电影名）、观众评分和参与评分观众人数，并三个一组作为字典附加到 * df_list *。\n\n这个任务所需的 Beautiful Soup 方法是：\n- `find()`\n- `find_all`\n\n关于这些方法，有一个不错的教程（在 Beautiful Soup 文档中 [搜索树](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#searching-the-tree)）。如果有什么问题，请观看教程。\n",
              "instructor_notes": ""
            },
            {
              "id": 432671,
              "key": "611f6763-2c1f-4361-b0e7-e9ef094bdb16",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view48ee5cf7",
              "pool_id": "jupyter",
              "view_id": "48ee5cf7-a09d-46e1-b4b1-b98b8b0e6d46",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/gathering.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 478677,
              "key": "7fd0219b-aca7-4ef4-80ed-1a926902df8a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 上述文件翻译\n\n```\nfrom bs4 import BeautifulSoup\nimport os\nimport pandas as pd\n```\n\n```\n# 字典列表可以逐个创建文件，随后转化为一个 DataFrame\ndf_list = []\nfolder = 'rt_html'\nfor movie_html in os.listdir(folder):\n    with open(os.path.join(folder, movie_html)) as file:\n        # 这里是你的代码\n        # 注释：正确操作需要花费 ~15 秒运行\n        \n        \n        # 添加到字典列表中\n        df_list.append({'title': title,\n                        'audience_score': int(audience_score),\n                        'number_of_audience_ratings': int(num_audience_ratings)})\ndf = pd.DataFrame(df_list, columns = ['title', 'audience_score', 'number_of_audience_ratings'])\n```\n\n### 解答测试\n\n运行下列单元格，查看你的解答是否正确。如果得到 AssertionError ，你的答案不正确。如果没有出现错误，你的答案是正确的。\n\n\n```\ndf_solution = pd.read_pickle('df_solution.pkl')\npd.testing.assert_frame_equal(df, df_solution)\n```",
              "instructor_notes": ""
            },
            {
              "id": 432672,
              "key": "e21fdf05-fd65-40e6-8bb6-5351b3cabbe5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 解决方案",
              "instructor_notes": ""
            },
            {
              "id": 432673,
              "key": "78e0d64a-bdbc-43dd-9552-a653e457fe3d",
              "title": "Python 中的 HTML 文件 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "3caDGTxcoCw",
                "china_cdn_id": "3caDGTxcoCw.mp4"
              }
            },
            {
              "id": 432674,
              "key": "25483d97-5986-4ee5-b300-40ff8fa54414",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* 注：在 3:59 时，本来应该是 \"空串\"，但说成了 \"空字符\"。",
              "instructor_notes": ""
            },
            {
              "id": 432676,
              "key": "c178f88d-44ed-4301-807c-0704429b4a95",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 更多信息\n- [Beautiful Soup](https://www.crummy.com/software/BeautifulSoup/)\n-  [Stack Overflow：Beautiful Soup 和 Unicode 问题](https://stackoverflow.com/questions/19508442/beautiful -soup-and-unicode-problems)\n- [Stack Overflow：Python：删除字符串中的 \\ xa0](https://stackoverflow.com/questions/10993612/python-removing-xa0-from-string)\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432789,
          "key": "97af08a3-5fd1-40cf-be3e-64d801b811b8",
          "title": "Flashforward 1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "97af08a3-5fd1-40cf-be3e-64d801b811b8",
            "completed_at": "2019-03-05T09:56:08.287Z",
            "last_viewed_at": "2019-03-11T04:10:05.127Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432677,
              "key": "5bb6dec7-e7c9-4557-b75e-7c14cb46e87b",
              "title": "Flashforward 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "- [Best of Rotten Tomatoes: Critic vs. Audience Scores (Tableau Public Viz)](https://public.tableau.com/views/BestofRottenTomatoesCriticvs_AudienceScores/BestofRottenTomatoesCriticvs_AudienceScores?:embed=y&:display_count=yes)",
              "video": {
                "youtube_id": "Sr5v0i9m_sw",
                "china_cdn_id": "Sr5v0i9m_sw.mp4"
              }
            },
            {
              "id": 689967,
              "key": "644dcc2c-5b00-430f-8cb5-38a36262c28d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "视频2:24处，导师提的内容指出是左下象限，即第三象限的数据，影评人评分和观众评分两者都低",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432794,
          "key": "ed908f34-ce67-44c0-acb1-d81abd5d9e37",
          "title": "资料来源：从互联网下载文件",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ed908f34-ce67-44c0-acb1-d81abd5d9e37",
            "completed_at": "2019-03-05T09:59:27.663Z",
            "last_viewed_at": "2019-03-11T04:59:50.920Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432678,
              "key": "5b5c6356-d8e4-4a7f-b6f5-a6f3d5c6e421",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 资料来源：从互联网下载文件\n### 简介",
              "instructor_notes": ""
            },
            {
              "id": 432679,
              "key": "2c2216b9-199a-46cc-9084-7de0ca74eb86",
              "title": "资料来源：从互联网下载文件",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "UceKUJ07Bn8",
                "china_cdn_id": "UceKUJ07Bn8.mp4"
              }
            },
            {
              "id": 432680,
              "key": "8a0b563e-81e2-4307-b2db-fb215fa3c542",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### HTTP（超文本传输协议）\nHTTP，全称是超文本传输协议，是 Web 浏览器（如 Chrome 或 Safari）和 Web 服务器（基本上指存储网站内容的计算机）之间相互沟通的语言。每次打开网页或下载文件或观看视频时，都是 HTTP 完成了这些任务。\n\nHTTP 是一个请求/响应协议：\n- 你的计算机，也就是客户端，向服务器发送一个需要某个文件的请求。例如在这节课中：*\"我需要文件** 1-the-wizard-of-oz-1939-film.txt **\"*。GET 是用于检索数据的 HTTP 请求方法（有多个）名称。\n- Web 服务器发回响应。如果请求有效：*\"这是你请求的文件：\"*，然后是*** 1-the-wizard-of-oz-1939-film.txt ***文件的内容。\n",
              "instructor_notes": ""
            },
            {
              "id": 432683,
              "key": "17a67bbe-8045-4bcc-bcda-80a3d9a63bff",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ca8e75_client-server/client-server.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/17a67bbe-8045-4bcc-bcda-80a3d9a63bff",
              "caption": "资料来源：[MDN 网络文档](https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Sending_and_retrieving_form_data)",
              "alt": "HTTP 客户端服务器图",
              "width": 400,
              "height": 141,
              "instructor_notes": null
            },
            {
              "id": 432684,
              "key": "888c8347-8ef4-43d5-8ee6-8f9572451145",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "如果想了解更多信息，或者想扩大自己的知识面，我建议你观看第 1 课中概念 2-5 和 24-30（\"Web 的工作原理\"）的免费 [Web 开发课程](https://cn.udacity.com/course/web-development--cs253)。\n\n ### 请求：让 HTTP 服务于人类",
              "instructor_notes": ""
            },
            {
              "id": 432685,
              "key": "a3d57822-0fb2-4044-851b-79a111412506",
              "title": "Source: Downloading Files From The Internet ",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "K-Owid_mf8o",
                "china_cdn_id": "K-Owid_mf8o.mp4"
              }
            },
            {
              "id": 432686,
              "key": "6372a4d1-7de1-418a-8a9c-b72cfd91df91",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 练习\n在下面的 Jupyter Notebook 中，使用 Requests 库以编程方式将所有 Rogert Ebert 审阅文本文件下载到名为 * ebert_reviews * 的文件夹中。与提供的 * ebert_review_urls * 列表结合使用一个 for 循环。\n\n以下是 [请求文档](http://docs.python-requests.org/en/master/)供你参考。这相对于类似的库，如 [urllib](https://docs.python.org/3/howto/urllib2.html)来说更清楚一些。\n\n### 提示\n\ncloudfront.net服务器在国外，建议直接在workspace中运行。\n\n",
              "instructor_notes": ""
            },
            {
              "id": 432687,
              "key": "f815f1db-274a-4787-9342-bab03a8c2175",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view1441528d",
              "pool_id": "jupyter",
              "view_id": "1441528d-2a3d-44af-a696-f66aa9944398",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/gathering.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 478680,
              "key": "53da23c1-26e2-44fc-ab6f-90793a522665",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 上述文件翻译\n\n```\nimport requests\nimport os\n```\n\n```\n# 如果没有目录，创建目录\nfolder_name = 'ebert_reviews'\nif not os.path.exists(folder_name):\n    os.makedirs(folder_name)\n```\n\n```\nebert_review_urls = ['https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9900_1-the-wizard-of-oz-1939-film/1-the-wizard-of-oz-1939-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9901_2-citizen-kane/2-citizen-kane.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9901_3-the-third-man/3-the-third-man.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9902_4-get-out-film/4-get-out-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9902_5-mad-max-fury-road/5-mad-max-fury-road.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9902_6-the-cabinet-of-dr.-caligari/6-the-cabinet-of-dr.-caligari.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9903_7-all-about-eve/7-all-about-eve.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9903_8-inside-out-2015-film/8-inside-out-2015-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9903_9-the-godfather/9-the-godfather.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9904_10-metropolis-1927-film/10-metropolis-1927-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9904_11-e.t.-the-extra-terrestrial/11-e.t.-the-extra-terrestrial.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9904_12-modern-times-film/12-modern-times-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9904_14-singin-in-the-rain/14-singin-in-the-rain.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9905_15-boyhood-film/15-boyhood-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9905_16-casablanca-film/16-casablanca-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9905_17-moonlight-2016-film/17-moonlight-2016-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9906_18-psycho-1960-film/18-psycho-1960-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9906_19-laura-1944-film/19-laura-1944-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9906_20-nosferatu/20-nosferatu.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9907_21-snow-white-and-the-seven-dwarfs-1937-film/21-snow-white-and-the-seven-dwarfs-1937-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9907_22-a-hard-day27s-night-film/22-a-hard-day27s-night-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9907_23-la-grande-illusion/23-la-grande-illusion.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9908_25-the-battle-of-algiers/25-the-battle-of-algiers.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9908_26-dunkirk-2017-film/26-dunkirk-2017-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9908_27-the-maltese-falcon-1941-film/27-the-maltese-falcon-1941-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9909_29-12-years-a-slave-film/29-12-years-a-slave-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9909_30-gravity-2013-film/30-gravity-2013-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9909_31-sunset-boulevard-film/31-sunset-boulevard-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad990a_32-king-kong-1933-film/32-king-kong-1933-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad990a_33-spotlight-film/33-spotlight-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad990a_34-the-adventures-of-robin-hood/34-the-adventures-of-robin-hood.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad990b_35-rashomon/35-rashomon.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad990b_36-rear-window/36-rear-window.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad990b_37-selma-film/37-selma-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad990c_38-taxi-driver/38-taxi-driver.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad990c_39-toy-story-3/39-toy-story-3.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad990c_40-argo-2012-film/40-argo-2012-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad990d_41-toy-story-2/41-toy-story-2.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad990d_42-the-big-sick/42-the-big-sick.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad990d_43-bride-of-frankenstein/43-bride-of-frankenstein.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad990d_44-zootopia/44-zootopia.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad990e_45-m-1931-film/45-m-1931-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad990e_46-wonder-woman-2017-film/46-wonder-woman-2017-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad990e_48-alien-film/48-alien-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad990f_49-bicycle-thieves/49-bicycle-thieves.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad990f_50-seven-samurai/50-seven-samurai.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad990f_51-the-treasure-of-the-sierra-madre-film/51-the-treasure-of-the-sierra-madre-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9910_52-up-2009-film/52-up-2009-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9910_53-12-angry-men-1957-film/53-12-angry-men-1957-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9910_54-the-400-blows/54-the-400-blows.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9911_55-logan-film/55-logan-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9911_57-army-of-shadows/57-army-of-shadows.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9912_58-arrival-film/58-arrival-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9912_59-baby-driver/59-baby-driver.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9913_60-a-streetcar-named-desire-1951-film/60-a-streetcar-named-desire-1951-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9913_61-the-night-of-the-hunter-film/61-the-night-of-the-hunter-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9913_62-star-wars-the-force-awakens/62-star-wars-the-force-awakens.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9913_63-manchester-by-the-sea-film/63-manchester-by-the-sea-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9914_64-dr.-strangelove/64-dr.-strangelove.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9914_66-vertigo-film/66-vertigo-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9914_67-the-dark-knight-film/67-the-dark-knight-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9915_68-touch-of-evil/68-touch-of-evil.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9915_69-the-babadook/69-the-babadook.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9915_72-rosemary27s-baby-film/72-rosemary27s-baby-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9916_73-finding-nemo/73-finding-nemo.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9916_74-brooklyn-film/74-brooklyn-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9917_75-the-wrestler-2008-film/75-the-wrestler-2008-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9917_77-l.a.-confidential-film/77-l.a.-confidential-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9918_78-gone-with-the-wind-film/78-gone-with-the-wind-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9918_79-the-good-the-bad-and-the-ugly/79-the-good-the-bad-and-the-ugly.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9918_80-skyfall/80-skyfall.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9919_82-tokyo-story/82-tokyo-story.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9919_83-hell-or-high-water-film/83-hell-or-high-water-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9919_84-pinocchio-1940-film/84-pinocchio-1940-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad9919_85-the-jungle-book-2016-film/85-the-jungle-book-2016-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad991a_86-la-la-land-film/86-la-la-land-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad991b_87-star-trek-film/87-star-trek-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad991b_89-apocalypse-now/89-apocalypse-now.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad991c_90-on-the-waterfront/90-on-the-waterfront.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad991c_91-the-wages-of-fear/91-the-wages-of-fear.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad991c_92-the-last-picture-show/92-the-last-picture-show.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad991d_93-harry-potter-and-the-deathly-hallows-part-2/93-harry-potter-and-the-deathly-hallows-part-2.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad991d_94-the-grapes-of-wrath-film/94-the-grapes-of-wrath-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad991d_96-man-on-wire/96-man-on-wire.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad991e_97-jaws-film/97-jaws-film.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad991e_98-toy-story/98-toy-story.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad991e_99-the-godfather-part-ii/99-the-godfather-part-ii.txt',\n                     'https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ad991e_100-battleship-potemkin/100-battleship-potemkin.txt']\n```\n\n```\n# 这里是你的代码\n# 将上面视频中的代码在 For 循环中运行，进行 Ebert 检查\n```\n\n### 解答测试\n\n运行下列网格，查看你的解答是否正确。如果得到 AssertionError ，你的答案不正确。如果没有出现错误，你的答案是正确的。\n\n```\nimport filecmp\ndc = filecmp.dircmp('ebert_reviews', 'ebert_reviews_solution')\nassert len(dc.common) == 88\n```",
              "instructor_notes": ""
            },
            {
              "id": 432688,
              "key": "c8aa5ff7-0027-4814-b65b-9be00db1bd8b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 解决方案",
              "instructor_notes": ""
            },
            {
              "id": 432689,
              "key": "59d09606-ae8e-408f-bb8d-4801127dd3dc",
              "title": "Source Downloading Files From The Internet II",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "M0qR7to1fl4",
                "china_cdn_id": "M0qR7to1fl4.mp4"
              }
            },
            {
              "id": 432690,
              "key": "acea1f21-0967-4fe1-9d25-08cfc44cfb17",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "  ### 更多信息\n- 我们在这个示例中下载了一个文本文件。二进制文件(例如图像)是最好读取和写入 [其他方式](http://docs.python-requests.org/en/latest/user/quickstart/#binary-response-content) 的文件。\n- [堆栈溢出：使用 Python 时，这个代码中的 'wb' 是什么意思?](https://stackoverflow.com/questions/2665866/what-is-the-wb-mean-in-this-code-using-python)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432795,
          "key": "c17de4ea-b195-44f9-8834-73a3953250e6",
          "title": "文本文件结构",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c17de4ea-b195-44f9-8834-73a3953250e6",
            "completed_at": "2019-03-05T10:38:19.335Z",
            "last_viewed_at": "2019-03-11T05:40:29.580Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432691,
              "key": "efd2853f-55c7-497c-b54d-e15f5287cb7a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 文本文件结构",
              "instructor_notes": ""
            },
            {
              "id": 432692,
              "key": "72722164-b0ba-4303-a93d-7ccac76bd826",
              "title": "文本文件结构",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "O4qEWpXZLQg",
                "china_cdn_id": "O4qEWpXZLQg.mp4"
              }
            },
            {
              "id": 432693,
              "key": "ab5147a7-286a-49af-b4ac-d5c9aa4cb550",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 编码和字符集文章\n\n### [绝对最低要求，每个软件开发人员必须完全主动了解 Unicode 和字符集(没有借口！)](https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/)，讲师：Joel Spolsky\n\n摘录：\n\n> **一个最重要的编码要点**\n\n> 如果你完全忘记了我刚刚解释的所有内容，请记住一个非常重要的要点。不知道字符串使用什么编码，那么字符串就没有任何意义。我们要重视这个问题，不能装作“普通”文本就是 ASCII。\n\n> **不能将这作为纯文本**\n\n> 如果内存、文件或电子邮件中有一个字符串，就必须知道它是什么编码，或者如果不能解释，那么就不能将其正确地呈现给用户。\n\n> 几乎可以将每个愚蠢的问题，例如“我的网站看起来乱七八糟”，或者“带有重音符号时，她无法读取我的电子邮件”归结为程序员太天真，他不明白一个简单的事实，如果不告诉我是否使用 UTF-8 或 ASCII 或 ISO 8859-1(拉丁文 1)或 Windows 1252(西欧)对特定的字符串进行编码，就根本无法正确显示这个字符串，甚至不知道它在哪里结束。编码和大于代码点 127 的代码有上百个，所以很难预测。\n\n### [处理文本时，每个程序员必须完全主动了解编码和字符集](http://kunststube.net/encoding/)\n\n> Joel Spolsky 的文章《绝对最低要求，每个软件开发人员必须完全主动了解 Unicode 和字符集(没有借口！)》对这进行了具体介绍，我非常喜欢每隔一段时间阅读一下。但我还是不太愿意向在理解编码方面有困难的人们推荐这个文章，尽管读起来很轻松，但他对实际技术细节并未做过多分析。我希望这篇文章可以更清楚地说明编码是什么，以及为什么在最不需要文本时，将所有文本搞得一团糟。\n\n> ...\n\n> **TL;DR**\n\n> 在许多不同的位序列中，可以对任何字符进行编码，任何特定位序列可以表示许多不同的字符，但这取决于使用哪种编码来读取或写入这些字符。原因是不同的编码对每个字符使用不同的位数，以及不同的值来表示不同的字符。”\n\n## Unicode 和 Python\n在 Python 3 中：\n- 一个文本类型：`str`，具有 Unicode 数据\n- 两个字节类型：`bytes` 和 `bytearray`\n\n堆栈溢出应答 [此处](https://stackoverflow.com/questions/6224052/what-is-the-difference-between-a-string-and-a-byte --string)很好地解释了不同的用例。\n\n## 更多信息\n- 如果仍然对字符集和编码之间的区别感到困惑，可以查阅以下文章：\n- [UTF-8 与 Unicode 之间的区别](http://www.polylab.dk/utf8-vs-unicode.html)\n- [更多关于 Python 2 和 3 中 Unicode 的内容](http://lucumr.pocoo.org/2014/1/5/unicode-in-2-and-3/)\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432796,
          "key": "2f5ac1b6-4a8b-4f39-a0de-769f21837f13",
          "title": "Python 中的文本文件",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2f5ac1b6-4a8b-4f39-a0de-769f21837f13",
            "completed_at": "2019-03-05T10:53:34.093Z",
            "last_viewed_at": "2019-03-05T10:53:31.434Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432694,
              "key": "eeb84eb6-35a1-467e-aa33-1ed4d7235a2d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Python 中的文本文件\n\n下面视频的前两分钟主要介绍了 [glob](https://docs.python.org/3/library/glob.html) 库，这使采用类似的路径结构打开文件(就像我们的 Roger Ebert 影评文本文件文件夹一样)变得非常简单。",
              "instructor_notes": ""
            },
            {
              "id": 432695,
              "key": "ce029972-c2a2-410d-b365-c2065af41d39",
              "title": "Python 中的文本文件 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "nDWAZOU3W3U",
                "china_cdn_id": "nDWAZOU3W3U.mp4"
              }
            },
            {
              "id": 432696,
              "key": "6433e270-07b1-4c91-b6c8-06bda0c28175",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 练习\n\n所以我们使用 88 Roger Ebert 影评打开和阅读，你可以在* ebert_reviews *文件夹下面的 Jupyter Notebook 仪表板中看到(单击左上角的 *jupyter* 就可以访问仪表盘)。如果想在 Udacity 课程结束后操作，单击 [此链接](https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59ca9db1_ebert-reviews/ebert-reviews.zip)下载压缩文件夹。\n\n为了打开和读取每个文件，我们需要循环遍历这个文件夹中的所有文件，然后将我们需要的文本位提取为单独的数据：\n- 第一行也称为电影标题(合并到主数据集)\n- 第二行也就是评论网址(不一定需要word cloud，但如果提供也很好)\n- 从第三行开始的所有内容都是评论文本的内容\n\n下面的 Jupyter Notebook 包含模板代码：\n- 创建一个空列表，* df_list *，并附加字典。这个字典列表最终将被转换为 pandas DataFrame(这是 [逐行构建 DataFrame 的最有效方式](https://stackoverflow.com/a/28058264))。\n- 在* ebert_reviews *文件夹中循环遍历每部电影的 Roger Ebert 影评文本文件。\n- 使用 [glob](https://docs.python.org/3/library/glob.html) 生成的路径打开每个文本文件，并将其传达到名为 * file * 的文件句柄中。\n- 通过使用 [`pd.DataFrame` 构造函数](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html)转换 *df_list* 来创建名为 *df* 的 DataFrame。\n\n你的任务是提取电影标题、Roger Ebert 影评网址和每个文本文件中的评论，并每三个一组将它们作为字典附加到 *df_list*。\n\n这个任务需要的文件方法是：\n- `readline()`\n- `read()`",
              "instructor_notes": ""
            },
            {
              "id": 432699,
              "key": "0a6ccc79-992c-4e23-a366-3fd76aa8a910",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view27634114",
              "pool_id": "jupyter",
              "view_id": "27634114-fd93-4cc2-8bc2-8b6e73d920b4",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/gathering.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 478697,
              "key": "612d8c22-96f3-425a-be92-e3869527f97a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 以上文件的翻译\n\n```\nimport glob\nimport pandas as pd\n```\n\n```\n# 字典列表可以逐个创建文件，随后转化为一个 DataFrame\ndf_list = []\nfor ebert_review in glob.glob('ebert_reviews/*.txt'):\n    with open(ebert_review, encoding='utf-8') as file:\n        title = file.readline()[:-1]\n        # 这里是你的代码\n\n        # 添加到字典列表中\n        df_list.append({'title': title,\n                        'review_url': review_url,\n                        'review_text': review_text})\ndf = pd.DataFrame(df_list, columns = ['title', 'review_url', 'review_text'])\n```\n\n### 解答测试\n\n运行下列网格，查看你的解答是否正确。如果得到 AssertionError ，你的答案不正确。如果没有出现错误，你的答案是正确的。\n\n```\ndf_solution = pd.read_pickle('df_solution.pkl')\npd.testing.assert_frame_equal(df, df_solution)\n```\n\n备注：文件收集方式是正确的，提示错误的是两个文件的索引值不一致。如果提示报错，可以先继续学习下面的内容。",
              "instructor_notes": ""
            },
            {
              "id": 432700,
              "key": "dfd108d5-0ef8-4b2a-8000-999ac52033e9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 解决方案",
              "instructor_notes": ""
            },
            {
              "id": 432701,
              "key": "ee9ea83f-a0ec-4267-89b9-4a7b20181691",
              "title": "Python 中的文本文件 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "9YPOlROXNZM",
                "china_cdn_id": "9YPOlROXNZM.mp4"
              }
            },
            {
              "id": 432702,
              "key": "a164f550-0b22-4761-bf02-5ea5817bd881",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 更多信息\n- [Stack Overflow：在 Python 中打开文件的最佳方法](https://stackoverflow.com/a/22288895)\n- [Stack Overflow：准确且完全 Pythonic 化的文件读取方式](https://stackoverflow.com/a/8010133)\n- [Stack Overflow：迭代与迭代器](https://stackoverflow.com/a/16994568)\n- [Wikipedia：Glob 编程](https://en.wikipedia.org/wiki/Glob_(programming)\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432797,
          "key": "dd0877f5-f3e7-4fab-869a-126e89ce944b",
          "title": "资料来源：API(应用程序编程接口)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dd0877f5-f3e7-4fab-869a-126e89ce944b",
            "completed_at": "2019-03-05T11:18:40.525Z",
            "last_viewed_at": "2019-03-05T11:20:46.677Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432703,
              "key": "c0882372-193c-4d4f-b1cd-b3a77a396832",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 资料来源：API(应用程序编程接口)\n### 简介",
              "instructor_notes": ""
            },
            {
              "id": 432706,
              "key": "a18f0b4c-ab00-4227-a1c4-32de438d68c5",
              "title": "资料来源：API(应用程序编程接口)",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "1y_qjUMDsCw",
                "china_cdn_id": "1y_qjUMDsCw.mp4"
              }
            },
            {
              "id": 432707,
              "key": "1fed2e31-185e-4ef3-bef1-e0287517e181",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### API 和访问库",
              "instructor_notes": ""
            },
            {
              "id": 432708,
              "key": "49477dde-7e37-40e2-9904-388ae6ab1917",
              "title": "Source: APIs (Application Programming Interfaces) 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "tobH58uO24U",
                "china_cdn_id": "tobH58uO24U.mp4"
              }
            },
            {
              "id": 432709,
              "key": "a9a78440-392a-4a57-8c99-3d2e1756ce92",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**MediaWiki API**\n\nMediaWiki 的网站上有一个很好的 [tutorial](https://www.mediawiki.org/wiki/API:Main_page#A_simple_example)，是关于他们的 API 调用是如何组织的。这是一个很好的简单例子，解释了各种移动部分：\n- 端点 *（重要的经验：这个 URL 没有什么特别的）*\n- 格式\n- 动作\n- 特定动作的参数\n\n我们先来看看这个例子，然后继续回到Lesson。\n\n看完了吗？好的！虽然他们说这是一个*简单的例子*，但还有一种方法可以使它更简单！那就是访问库，也称为客户端库，甚至只是库（如 **Twitter API 库**），它们将发挥作用，使我们的生活更轻松。\n\n**wptools 库**\n\nMediaWiki 有一堆不同的访问库，可以满足当前的各种编程语言。这是 Python 的 [列表](https://www.mediawiki.org/wiki/API:Client_code#Python)。这对于大多数 API 都比较标准。一些库比其他库更好一点，但也是标准的。对于 MediaWiki，Python 中最新和可读的库是 [wptools](https://github.com/siznax/wptools)。Twitter 的类似关系是：\n- MediaWiki API → wptools\n- Twitter API → tweepy\n\n*wptools* 使用 [Mahatma Gandhi 维基百科页面](https://en.wikipedia.org/wiki/Mahatma_Gandhi) 的 GitHub 页面上有一个更简单的教程，可作为示例使用。\n\n如果要获取一个 `page` 对象，[使用](https://github.com/siznax/wptools/wiki/Usage#page-usage) 如下：\n\n```python\npage = wptools.page('Mahatma_Gandhi')\n```\n\n其中 *'Mahatma_Gandhi'* 是这个[页面](https://en.wikipedia.org/wiki/Mahatma_Gandhi) 上维基百科 URL 的最后一位。这个 `page` 对象的一些方法可以让我们获得有关维基百科页面的各种数据，包括页面上的所有图像。要获取所有数据：\n\n>仅在页面上调用 get() 将通过 MediaWiki、Wikidata 和 RESTBase API 自动获取摘要、图像、信息数据、维基数据和其他元数据。\n\n```python\npage = wptools.page('Mahatma_Gandhi').get()\n```\n\n或者如果你已经将一个页面对象赋值给 `page`：\n\n```python\npage.get()\n```\n\n`page` 现在具有以下属性，可通过 `.data` 使用点符号来访问：\n",
              "instructor_notes": ""
            },
            {
              "id": 432711,
              "key": "7f2065d0-9ad2-4be4-a212-8ff5c08284f5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://d17h27t6h515a5.cloudfront.net/topher/2017/October/59d689e9_screenshot-2017-10-05-15.37.03/screenshot-2017-10-05-15.37.03.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7f2065d0-9ad2-4be4-a212-8ff5c08284f5",
              "caption": "",
              "alt": "wptools page.get() data",
              "width": 741,
              "height": 615,
              "instructor_notes": null
            },
            {
              "id": 432712,
              "key": "fd2ecd16-c8de-40ea-9f39-a7bf0595920d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "例如 `page.data ['image']`，将在这个特定维基百科页面上返回六个图像的数据列表。\n\n### 练习\n在下面的 Jupyter Notebook 中，获取 ET The Extra-Terrestial 维基百科页面的页面对象。以下是 [ET 维基百科页面](https://en.wikipedia.org/wiki/E.T._the_Extra-Terrestrial)，供你参考。\n      ",
              "instructor_notes": ""
            },
            {
              "id": 478699,
              "key": "26e87995-a9e6-444e-b575-33dbf81216dc",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewa148d766",
              "pool_id": "jupyter",
              "view_id": "a148d766-16e5-4941-b2bd-3602ddb30865",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/gathering (4)-zh.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 432714,
              "key": "52d077e6-48a3-478d-a6c8-7961dea41112",
              "title": "练习：API",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "52d077e6-48a3-478d-a6c8-7961dea41112",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "让代码在上面的 Jupyter Notebook 中运行，然后将为 * wptools 页面对象*赋值的代码行复制并粘贴到电影 ET The Extra-Terrestrial 的变量*页面*，以 `page = ` 开头。",
                "matchers": [
                  {
                    "expression": "^\\s*page\\s*=\\s*wptools\\.page\\(\\s*'E\\.T\\._the_Extra-Terrestrial'\\s*\\).get\\(\\)\\s*$"
                  },
                  {
                    "expression": "^\\s*page\\s*=\\s*wptools\\.page\\(\\s*\"E\\.T\\._the_Extra-Terrestrial\"\\s*\\).get\\(\\)\\s*$"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 432799,
          "key": "6c90f297-a296-4590-83e9-fc4a78248402",
          "title": "JSON 文件结构",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6c90f297-a296-4590-83e9-fc4a78248402",
            "completed_at": "2019-03-05T11:57:55.254Z",
            "last_viewed_at": "2019-03-05T11:57:53.626Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432715,
              "key": "353f1534-11fb-420b-ac63-3b3b81c63788",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## JSON 文件结构",
              "instructor_notes": ""
            },
            {
              "id": 432716,
              "key": "668ca18a-0a14-4981-a409-f7d8d32d332a",
              "title": "JSON 文件结构",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "hO2CayzZBoA",
                "china_cdn_id": "hO2CayzZBoA.mp4"
              }
            },
            {
              "id": 432719,
              "key": "70adcf04-b872-4c48-b6ea-a3ba9e26248c",
              "title": "JSON 数据结构",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "70adcf04-b872-4c48-b6ea-a3ba9e26248c",
                "completed_at": "2019-03-05T12:04:34.790Z",
                "last_viewed_at": "2019-03-05T12:04:34.790Z",
                "unstructured": "{\"answer_ids\":[\"a1506534753135\",\"a1506535272796\"],\"is_correct\":true}"
              },
              "question": {
                "complex_prompt": {
                  "text": "虽然 JSON 有六种有效的数据类型，但其中两种可使层次数据在采用大部分格式时具有灵活性：\n- JSON 数组\n- JSON 对象\n\n这些在 Python 中有类似的数据结构，所以可以使用相同的方法访问。\n\n将 JSON 数据类型与其类似的 Python 数据结构匹配起来。\n"
                },
                "concepts_label": "JSON 数据类型",
                "answers_label": "Python 数据结构",
                "concepts": [
                  {
                    "text": "JSON 数组",
                    "correct_answer": {
                      "id": "a1506534753135",
                      "text": "Python 列表"
                    }
                  },
                  {
                    "text": "JSON 对象",
                    "correct_answer": {
                      "id": "a1506535272796",
                      "text": "Python 字典"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1506534753135",
                    "text": "Python 列表"
                  },
                  {
                    "id": "a1506535272796",
                    "text": "Python 字典"
                  }
                ]
              }
            },
            {
              "id": 432720,
              "key": "71919481-af1f-4925-b6e0-f7716b4b8be4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 更多信息\n- [Udacity - Youtube：Android 开发人员眼中的 JSON]((https://www.youtube.com/watch?v=0IOCgHrTJGU)\n- [Mashery：API 数据交换：XML 与 JSON](https://www.tibco.com/blog/2014/01/23/api-data-exchange-xml-vs-json/)\n\n不过，youtube链接需要科学上网。",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432801,
          "key": "8a632dde-1139-4936-8f4e-486d7ea7ae14",
          "title": "Python 中的 JSON 文件",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8a632dde-1139-4936-8f4e-486d7ea7ae14",
            "completed_at": "2019-03-05T12:04:45.698Z",
            "last_viewed_at": "2019-03-05T12:04:45.533Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432721,
              "key": "3c223337-8ed3-4426-8e53-2764d5af894c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Python 中的 JSON 文件",
              "instructor_notes": ""
            },
            {
              "id": 432722,
              "key": "abc11a7a-aa68-4512-847a-801240590806",
              "title": "Python 中的 JSON 文件",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8JdUknZP59Q",
                "china_cdn_id": "8JdUknZP59Q.mp4"
              }
            },
            {
              "id": 432723,
              "key": "444ce959-f6dc-4748-afb9-3b6bbc85cfd0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 练习\n\n如上面视频末尾所述，下载影片海报图片，添加word cloud之前，我们先访问 * wptools * 页面对象属性。我们来看看 [ET The Extra-Terrestial 维基百科页面](https://en.wikipedia.org/wiki/E.T._the_Extra-Terrestrial) 的* wptools *`page` 对象。在下面的 Jupyter Notebook 中，你将访问 * images *和* infobox * 属性及它们中的数据。\n\n",
              "instructor_notes": ""
            },
            {
              "id": 478700,
              "key": "7f41e535-15bb-4c13-a27b-5b3ec4cd427f",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewedea4417",
              "pool_id": "jupyter",
              "view_id": "edea4417-3f84-48fe-8f0d-988d82b6bfcf",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/gathering (5)-zh.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 432725,
              "key": "6fab6d16-de8e-483f-b776-2395fe3f77bd",
              "title": "练习：JSON 数组",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6fab6d16-de8e-483f-b776-2395fe3f77bd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "给出ET 维基百科页面的 *wptools* `page` 对象(已经调用 `.get()` 了)，什么表达式可使我们访问图片特性（它是个 JSON 数组）中的第一个图片？",
                "matchers": [
                  {
                    "expression": "^\\s*page\\s*\\.\\s*data\\s*\\[\\s*'image'\\s*\\]\\s*\\[\\s*0\\s*\\]\\s*$"
                  },
                  {
                    "expression": "^\\s*page\\s*\\.\\s*data\\s*\\[\\s*\"image\"\\s*\\]\\s*\\[\\s*0\\s*\\]\\s*$"
                  }
                ]
              }
            },
            {
              "id": 432726,
              "key": "81e7ef50-dcf0-4aaa-9c95-e59f118915d5",
              "title": "练习：JSON 对象",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "81e7ef50-dcf0-4aaa-9c95-e59f118915d5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "给出 ET 维基百科页面的 *wptools* `page` 对象(已经调用 `.get()` 了)，什么表达式可使我们访问 infobox 特性（它是个 JSON 对象）中的 director 键？",
                "matchers": [
                  {
                    "expression": "^\\s*page\\s*\\.\\s*data\\s*\\[\\s*'infobox'\\s*\\]\\s*\\[\\s*'director'\\s*\\]\\s*$"
                  },
                  {
                    "expression": "^\\s*page\\s*\\.\\s*data\\s*\\[\\s*\"infobox\"\\s*\\]\\s*\\[\\s*\"director\"\\s*\\]\\s*$"
                  },
                  {
                    "expression": "^\\s*page\\s*\\.\\s*data\\s*\\[\\s*'infobox'\\s*\\]\\s*\\[\\s*\"director\"\\s*\\]\\s*$"
                  },
                  {
                    "expression": "^\\s*page\\s*\\.\\s*data\\s*\\[\\s*\"infobox\"\\s*\\]\\s*\\[\\s*'director'\\s*\\]\\s*$"
                  }
                ]
              }
            },
            {
              "id": 432727,
              "key": "000b99ea-1a3b-4f3c-8bb5-d2646f1d11f2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Python 中的更多 JSON\n在这节课的示例中，JSON 数据来自 API。但并不总是如此！有时你会得到一个文本文件，其中有可读的 JSON。对于这种情况，[*json*](http://docs.python-guide.org/en/latest/scenarios/json/) 库是不可或缺的。它可以*从*字符串或文件解析 JSON，也可以将 JSON 解析*到* Python 字典或列表。还可以将 Python 字典或列表转换为 JSON 字符串。链接文档页面上的教程随时供你使用。\n\n*pandas* 也具有 JSON 函数(`read_json` 函数和 `to_json` DataFrame 方法)，但是在 pandas 的列表 DataFrame 中没有发挥出 JSON 的层次优势，所以使用有限。\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432802,
          "key": "e1e1648f-b80b-4d5a-a986-97474ebcb089",
          "title": "混搭：API、以编程方式下载文件、JSON",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e1e1648f-b80b-4d5a-a986-97474ebcb089",
            "completed_at": "2019-03-05T12:08:23.938Z",
            "last_viewed_at": "2019-03-05T12:08:22.119Z",
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "Mashup-Solution",
                "uri": "https://s3.amazonaws.com/video.udacity-data.com/topher/2018/June/5b2b56ad_mashup-solution/mashup-solution.ipynb"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 432728,
              "key": "1aee8449-dc86-4694-bc1f-dc4c4255b18e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 混搭：API、以编程方式下载文件和 JSON\n\n在你已经有了关于API、以编程方式从互联网下载文件和JSON的相足够经验后，可以下载 Roger Ebert 影评 Word clouds 中的所有电影海报图。这是你的下一个任务。\n\n开始之前，需要注意的两个关键事项是：\n\n### 1. 维基百科页面标题\n\n如果你要通过 MediaWiki API 使用 *wptools* 访问维基百科页面数据，就需要每部电影的维基百科页面标题，即网址中 ** en.wikipedia.org / wiki / ** 里最后一个斜杠之后的内容。在这节课中，我已经为你编写了前 100 部电影的所有标题。",
              "instructor_notes": ""
            },
            {
              "id": 432731,
              "key": "550c7611-e0eb-4b9e-90fe-8ba065932640",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59cb2684_screenshot-2017-09-27-00.16.09/screenshot-2017-09-27-00.16.09.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/550c7611-e0eb-4b9e-90fe-8ba065932640",
              "caption": "",
              "alt": "已突出显示 ET 的维基百科页面标题",
              "width": 1224,
              "height": 662,
              "instructor_notes": null
            },
            {
              "id": 432732,
              "key": "0b42caf6-23f3-40d1-8d10-1ff8d343c430",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 2. 下载图像文件\n\n例如，从读取和写入的角度来看，与可以逐行读取的文本文件相比，下载图像可能会比较麻烦。但实际上，图像文件并不特殊 - 它们只是二进制文件。要与它们互动，不需要“理解”图像的特殊软件(如 Photoshop 或某些其他软件)。你可以使用常规的文件打开、读取和写入方法，比如下面的方法：\n\n```python\nimport requests\nr = requests.get(url)\nwith open(folder_name + '/' + filename, 'wb') as f:\n    f.write(r.content)\n```\n\n但是这种技术可能容易出错，不过大部分情况下可以正常使用，只是有时候会破坏写入的文件。我在准备这个节课时就出现过这种情况：\n",
              "instructor_notes": ""
            },
            {
              "id": 432733,
              "key": "521f3617-fd39-4bd5-ae2b-21e90b9f53c2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://d17h27t6h515a5.cloudfront.net/topher/2017/September/59cac58c_screenshot-2017-09-26-17.23.26/screenshot-2017-09-26-17.23.26.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/521f3617-fd39-4bd5-ae2b-21e90b9f53c2",
              "caption": "",
              "alt": ".jpg file opening error",
              "width": 1066,
              "height": 416,
              "instructor_notes": null
            },
            {
              "id": 432734,
              "key": "f685c10d-78d5-4cda-b355-2c00a49f5259",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n这种错误是因为 [requests](http://docs.python-requests.org/en/latest/user/quickstart/#binary-response-content) 库的维护人员推荐使用 [PIL 库](https://pillow.readthedocs.io/)(Pillow 的缩写)和 BytesIO， 它来自于处理非文本文件（例如：图像）请求的 io 库。对于非文本请求，他们建议你访问作为字节的响应正文。例如，根据请求返回的二进制数据创建一个图像：\n\n```python\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\nr = requests.get(url)\ni = Image.open(BytesIO(r.content))\n```\n\n虽然你可能仍然会遇到类似的文件错误，上面的代码至少会给我们提供一个错误消息，出现错误时，我们可以手动下载有问题的图像。\n\n### 练习\n我们现在来收集 Roger Ebert 影评Word clouds的最后一个数据：电影海报图像文件。还要保留每个图像的 URL，以便之后将它们添加到主 DataFrame。\n\n虽然我们将使用一个循环来最大程度减少重复，但在这个循环中，主要部分的工作原理如下：\n1. 我们将使用 *wptools* 来查询 MediaWiki API，以便通过每个页面对象的 `image` 属性获取电影海报 URL。\n2. 使用这个 URL，我们以编程方式将这个图像下载到名为 *bestofrt_posters* 的文件夹中。\n\n**这个不错，可以试一试。**\n\n下面的 Jupyter Notebook 包含模板代码：\n- 包含 *title_list*，这是 Rotten Tomatoes 前 100 部热门电影列表。这个列表的排列与前 100 部电影相同。\n- 创建一个空列表，*df_list*，并附加字典。这个字典列表最终将被转换为 pandas DataFrame(这是 [逐行构建 DataFrame 的最有效方式](https://stackoverflow.com/a/28058264))。\n- 创建一个空文件夹*bestofrt_posters*，存储下载的电影海报图像文件。\n- 创建一个空字典，*image_errors*，填充以跟踪不起作用的电影海报图像 URL。\n- 循环遍历 *title_list* 中的维基百科页面标题，以及：\n-根据标题在 *title_list* 中的位置，将该电影的排名存储在前 100 部电影列表中。还需要排名，所以后面我们可以将 Master DataFrame  与 DataFrame 结合。但不能加入标题，原因是 Rotten Tomatoes 页面和维基百科页面的标题不同。\n- 使用 [`try` 和 `except` 块](http://www.pythonforbeginners.com/error-handling/python-try-and-except) 试着查询 MediaWiki，获取电影海报图像 URL，并试着下载图像。如果尝试失败并遇到错误，那么出错的电影将被记录在 *image_errors* 中。\n- 以 *排序*、*标题* 和 *poster_url* 作为关键字附加字典，并作为值将每个关键字的提取值附加到 *df_list*。\n- 检查导致错误的图像，并单独下载正确的图像(通过 `image` 属性列表中的另一个 URL 或 Google Images 的 URL)\n- 通过使用 [`pd.DataFrame` 构造函数](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html) 转换 *df_list* 来创建名为 *df* 的 DataFrame。\n",
              "instructor_notes": ""
            },
            {
              "id": 432735,
              "key": "5ce631e9-ad35-4f29-ad77-c121ae4823ad",
              "title": "任务",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5ce631e9-ad35-4f29-ad77-c121ae4823ad",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "填写 *图片* 变量，练习你的 API 技能。",
                "填写 *first_image_url* 变量，练习你的 JSON 技能。",
                "填写 *r* 变量，练习你的编程下载技能。"
              ],
              "positive_feedback": "不错！如果还没有准备好，请运行下面notebook 中的最后一个单元格来练习你的解决方案。",
              "video_feedback": null,
              "description": "下面的 Jupyter Notebook 中，*for title in title_list:* 循环中的*标题里："
            },
            {
              "id": 478701,
              "key": "64a71f85-7f1c-4e2b-9ef1-25d6b9468e95",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view5b4b0177",
              "pool_id": "jupyter",
              "view_id": "5b4b0177-ab55-44be-a64c-6a504dc062e6",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/gathering (6)-zh.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 478702,
              "key": "a84da6fe-1b51-40ca-aeda-7c68595575b7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 解决方案 (右键另存为)\n- [混搭解决方案 Jupyter Notebook](https://s3.amazonaws.com/video.udacity-data.com/topher/2018/June/5b2b56ad_mashup-solution/mashup-solution.ipynb)\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432803,
          "key": "a05b088f-fbd4-4491-9299-9db0295351f3",
          "title": "Flashforward 2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a05b088f-fbd4-4491-9299-9db0295351f3",
            "completed_at": "2019-03-05T12:10:12.286Z",
            "last_viewed_at": "2019-03-05T12:10:11.479Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432738,
              "key": "06ce7812-24d5-48f1-832b-a62246f34070",
              "title": "Flashforward 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "- [Word clouds (black borders)](https://github.com/udacity/new-dand-advanced-china/raw/master/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/wordclouds-black.zip)\n- [Word clouds (white borders)](https://github.com/udacity/new-dand-advanced-china/raw/master/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/wordclouds-white.zip)",
              "video": {
                "youtube_id": "Sbyn8aT-8G8",
                "china_cdn_id": "Sbyn8aT-8G8.mp4"
              }
            }
          ]
        },
        {
          "id": 432804,
          "key": "51b89ca3-e83c-4a19-ac87-9598410f6873",
          "title": "存储数据",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "51b89ca3-e83c-4a19-ac87-9598410f6873",
            "completed_at": "2019-03-05T12:12:33.208Z",
            "last_viewed_at": "2019-03-05T12:12:32.499Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432739,
              "key": "b980778b-7912-420b-afd6-d22cbb1e247d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 存储数据\n\n通常在清理后存储数据，但也并非总是这样，所以数据整理过程的核心部分不包括数据存储。有时只需要分析和可视化，不需要保存新数据。\n\n其次，因为清理数据后再进行存储，所以我们可以在第 4 课(\"清理数据\")结束时对这加以说明。但是，我们将在这节课介绍文件格式，我们现在来具体看看。\n\n设想一下，你已经评估并清理了数据，其中包括合并所有这些单独数据，我在最后一个视频中已经说过，我已经处理了所有后台工作，那么你想下一步做些什么？\n",
              "instructor_notes": ""
            },
            {
              "id": 432740,
              "key": "86048ffe-8194-4ded-813f-d35c50b96438",
              "title": "存储数据",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "hcosH34b-yw",
                "china_cdn_id": "hcosH34b-yw.mp4"
              }
            },
            {
              "id": 432741,
              "key": "ecbcf911-22b8-4239-b190-aab7b99d7f4b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "我们已在“平面文件结构”概念那节课中讨论过平面文件的优缺点。其中一个优点是：\n\n> 非常适用于小数据集。\n\n而其中的一个缺点是：\n\n> 共享数据可能比较麻烦。\n\n考虑到数据集的大小和可能不会共享这些数据集，所以将其保存到像 CSV 这样的平面文件可能是最好的解决方案。使用 pandas 将收集的数据保存到 CSV 文件很容易。[`to_csv` DataFrame 方法](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html) 已经足够了，*将文件保存到计算机* 所需要的唯一一个参数是要保存这个文件的文件路径。如果不希望 DataFrame 索引在存储的数据集中显示为列，通常还需要指定 `index=False`。如果你有一个 DataFrame * df *，并想保存到一个没有索引列且名为 *dataset.csv* 的文件中：\n\n```python\ndf.to_csv('dataset.csv', index=False)\n```\n\n## 练习\n\n在下面的 Jupyter Notebook 中，将 Master DataFrame 存储在名为 *bestofrt_master.csv* 的文件中。然后查看 Jupyter Notebook 仪表板(单击notebook 左上角的 *jupyter*)，看看是否成功保存文件。\n",
              "instructor_notes": ""
            },
            {
              "id": 478703,
              "key": "fb05b1bb-633f-45d4-8afd-16f052ea1a20",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view04a6fa67",
              "pool_id": "jupyter",
              "view_id": "04a6fa67-f59f-4550-ab56-657f49960578",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/gathering (7)-zh.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 432805,
          "key": "0a0addb5-3c19-42db-93eb-b7e7d256d69c",
          "title": "关系数据库结构",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0a0addb5-3c19-42db-93eb-b7e7d256d69c",
            "completed_at": "2019-03-05T12:16:56.312Z",
            "last_viewed_at": "2019-03-05T12:16:55.503Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432744,
              "key": "f4e03edd-9150-47d3-9154-55a703f00e53",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 关系数据库结构\n数据库是一种有组织的数据集合，进行结构化整理后可方便数据存储、检索、修改和删除。有两种主要的数据库类型：关系数据库和非关系数据库，其中关系数据库最常用。\nSQL 或结构化查询语言是用于与关系数据库沟通的标准语言。\n\n我们转到 [Mode Analytics](https://modeanalytics.com/)(一家为基于 SQL 数据分析开发软件的公司)的联合创始人兼首席执行官 [Derek Steer](https://twitter.com/dereksteer)，他介绍了关系数据库的基本结构、优缺点以及如何使用 SQL 进行交互。下面大概时长为 5 分钟的视频和文字概括了这一节课的所有要点内容。\n\n数据库和 SQL 是这节课的两个主要内容。如果还想了解更多信息，可以学习 [商业数据分析纳米学位](https://www.udacity.com/course/data-foundations-nanodegree--nd100) 或 [数据分析师纳米学位](https://www.udacity.com/course/data-analyst-nanodegree--nd002)(如果还没有学习)访问 Derek 的 SQL 部分，学习数据分析课程。我们也在本纳米学位中最后的可选部分为你提供了关系数据库入门的视频材料。\n\n我选择了与数据整理最相关的一部分视频，供你学习。观看视频时，可以设想如何表示 Rotten Tomatoes 主数据集，以及如何查询来获取相关信息。看完视频之后还有一个 SQL Explorer Workspace，你可以在 Derek 提到的相同 PostgreSQL 数据库中进行查询。\n\n### 为什么数据分析师使用关系数据库和 SQL？\n",
              "instructor_notes": ""
            },
            {
              "id": 432745,
              "key": "e6a297b1-f2d6-41a2-95bb-f92bfbf74099",
              "title": "为什么分析师喜欢使用 SQL",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "uCNOtUht2Xc",
                "china_cdn_id": "uCNOtUht2Xc.mp4"
              }
            },
            {
              "id": 432746,
              "key": "69fd9212-1c7c-49a0-9599-6cb18a85a3c4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 为什么企业选择使用关系数据库和 SQL？",
              "instructor_notes": ""
            },
            {
              "id": 432747,
              "key": "236de5d7-b3c6-4d95-a0fa-308c7191c054",
              "title": "Why Businesses Choose Databases",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "j4ey7--h9r8",
                "china_cdn_id": "j4ey7--h9r8.mp4"
              }
            },
            {
              "id": 432748,
              "key": "ba98bb94-4c6a-4bf1-a8b2-e2b208588325",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "我们曾在“平面文件结构”的概念中提到过：\n\n> 平面文件的缺点包括：\n- 缺乏标准\n- 数据冗余\n- 共享数据可能比较麻烦\n- 不太适用于大型数据集(请在 *更多信息* 中单击 Cornell 链接，查阅*”小数据集何时升级为大数据集？\"*)\n\n正如 Derek 所说，关系数据库都可以解决这些问题。如果这些问题对你很重要，那么关系数据库比保存到平面文件(比如 CSV 文件)更可取。\n",
              "instructor_notes": ""
            },
            {
              "id": 432749,
              "key": "2354f102-15a6-4750-ba9c-9094e5abb0d9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 关系数据库如何存储数据",
              "instructor_notes": ""
            },
            {
              "id": 432750,
              "key": "71b6a668-0daf-4b1d-b023-368c6e9e1f5c",
              "title": "数据库如何存储数据",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "H0C9z_sRvLE",
                "china_cdn_id": "H0C9z_sRvLE.mp4"
              }
            },
            {
              "id": 432751,
              "key": "91727518-4ff2-44d4-a57c-57f3890f912a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### SQL 语句的类型",
              "instructor_notes": ""
            },
            {
              "id": 432752,
              "key": "739b7632-2a5f-4d21-98f4-5d53946d6c3c",
              "title": "语句类型",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "vLvJbIz94C4",
                "china_cdn_id": "vLvJbIz94C4.mp4"
              }
            },
            {
              "id": 432753,
              "key": "2835ef75-9d0a-480c-8cd9-ededaed2cb75",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### SELECT 和 FROM",
              "instructor_notes": ""
            },
            {
              "id": 432754,
              "key": "ca51a79f-e96e-4ff2-98ea-f2bb1b8c8df5",
              "title": "SELECT 和 FROM 语句",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "urOYuuav4BY",
                "china_cdn_id": "urOYuuav4BY.mp4"
              }
            },
            {
              "id": 432756,
              "key": "185cd96c-1b7a-4382-8808-3b6ec3bfe55f",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewea4377c9",
              "pool_id": "sqlwidget",
              "view_id": "ea4377c9-4868-4cdd-98bc-dfedc09f188d",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 432757,
              "key": "153174b1-3314-40b1-bf12-4eaadd8bfc97",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 更多信息\n - [CCornell：关系数据库 - 不是父系平面文件](https://www.cac.cornell.edu/education/Training/DataAnalysis/RelationalDatabases.pdf)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432809,
          "key": "3048cfe0-9ade-4757-b02b-bdbe245df889",
          "title": "Python 中的关系数据库",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3048cfe0-9ade-4757-b02b-bdbe245df889",
            "completed_at": "2019-03-05T12:26:46.382Z",
            "last_viewed_at": "2019-03-05T12:26:44.781Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432758,
              "key": "a72e15ce-9e09-401e-87ed-5b5c4bf4ece3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Python 中的关系数据库\n\n### 数据整理和关系数据库\n\n在数据整理过程中，我们建议数据库和 SQL 仅用于收集数据或存储数据。也就是说：\n- **连接到数据库并将数据**导入到 pandas DataFrame(或首选编程语言的类似数据结构)中，然后评估和清理这些数据，或\n- **连接到数据库并存储**我们刚刚收集(可能来自数据库)、评估和清理的数据\n\n如果数据量比较大，这些处理工作将特别有用，而且 SQL 和数据库非常适合平面文件。\n\n可以将上述两种情况进一步分为三个主要任务：\n- 连接 Python 中的数据库\n- 将 *** pandas DataFrame *** 里的数据储存至你所连接的数据库中，以及\n- 将你所连接的数据库里的数据导入至 *** pandas DataFarme *** 中。\n\n### 本节课\n对于这节课中的示例，我们将按顺序操作：\n\n1. 连接到数据库。我们将使用 [SQLAlchemy](https://www.sqlalchemy.org/) 连接到 SQLite 数据库，这是 Python 的数据库工具包。\n\n2. 将数据存储在数据库中经清理的主数据集中。我们将使用 pandas 的 `to_csv` DataFrame 方法存储数据。\n\n3. 然后将该数据库中的全新数据读取到 pandas DataFrame 中。我们将使用 pandas 的 `read_csv` 函数来进行这些操作。\n\n这节课不需要进行第三条，但是有时候在工作过程中，会在项目开始时为你提供一个数据库。这就不一定必须得下载文件、抓取网页、点击 API 等。\n\n我们将在下面的 Jupyter Notebook 中介绍和执行上面三种操作。",
              "instructor_notes": ""
            },
            {
              "id": 478704,
              "key": "7634204b-c611-4243-90d5-cea531695ec5",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view2425e7e6",
              "pool_id": "jupyter",
              "view_id": "2425e7e6-a506-4ed0-8509-27d0c419119c",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/gathering (8)-zh.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 432760,
              "key": "ee23d2f0-6daf-4121-b6c3-600d084388e1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 在 SQL 中进行数据整理？\n实际上可以在 *SQL *中进行数据整理，但是我们认为 pandas 更适合收集 (pandas 在这方面有很大的优势，而且操作起来简单)、评估和清理数据，所以我们建议你使用 pandas。一般来说，[讨论 pandas 与 SQL 的 Reddit thread](https://www.reddit.com/r/Python/comments/1tqjt4/why_do_you_use_pandas_instead_of_sql/) 还是比较有趣的，还涉及几个与数据整理有关的主题。\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432806,
          "key": "6759e3cf-a7c4-4d9a-ac58-9aed785bd67b",
          "title": "其他文件格式",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6759e3cf-a7c4-4d9a-ac58-9aed785bd67b",
            "completed_at": "2019-03-05T12:28:29.972Z",
            "last_viewed_at": "2019-03-05T12:28:29.258Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432761,
              "key": "2f9ccd6d-b6a8-4f64-a789-2fcd24376b79",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 其他文件格式\n\n你在这节课中掌握的文件类型可用于绝大多数数据整理项目。这些文件类型是：\n\n- 平面文件(例如 CSV 和 TSV)\n- HTML 文件\n- JSON 文件\n- TXT 文件\n- 关系数据库文件\n\n其他常见的文件格式包括：\n- [Excel 文件](https://www.lifewire.com/what-is-an-xlsx-file-2622540)\n- [Pickle 文件](https://stackoverflow.com/questions/7501947/understanding-pickling-in-python)\n- [HDF5 文件](https://www.hdfgroup.org/HDF5/whatishdf5.html)\n- [SAS 文件](http://whatis.techtarget.com/fileformat/SAS-SAS-program-file)\n- [STATA 文件](http://faculty.econ.ucdavis.edu/faculty/cameron/stata/stataintro.html)\n\npandas [可以](http://pandas.pydata.org/pandas-docs/stable/api.html#input-output) 读取(写入大部分)这些文件。此外，你已经基本大致了解了**收集**和文件格式，所以如果需要，学习这些附加格式也不会太吃力。\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432807,
          "key": "2f58996f-08e5-4e1e-827a-8d422b671985",
          "title": "你可以迭代",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2f58996f-08e5-4e1e-827a-8d422b671985",
            "completed_at": "2019-03-05T12:29:08.637Z",
            "last_viewed_at": "2019-03-05T12:29:07.822Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432762,
              "key": "80827aeb-6e9e-4ca5-a40d-d5dcc9489ab5",
              "title": "你可以迭代",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "QsJqoJYhTiw",
                "china_cdn_id": "QsJqoJYhTiw.mp4"
              }
            }
          ]
        },
        {
          "id": 432808,
          "key": "1fd985ca-52e9-4333-a12e-d36aca2ee052",
          "title": "收集：总结",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1fd985ca-52e9-4333-a12e-d36aca2ee052",
            "completed_at": "2019-03-05T12:29:52.512Z",
            "last_viewed_at": "2019-03-05T12:29:52.249Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432763,
              "key": "424f8b96-82e0-482f-8ac7-2d8ced7b8687",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 收集：总结\n\n收集数据是数据整理过程的第一步：\n\n- **收集**\n- 评估\n- 清理\n\n根据数据来源及其格式，收集数据的步骤也不同。\n\n高级收集过程：\n- 获取数据(从互联网下载文件、抓取网页、查询 API 等)\n- 将数据导入编程环境(例如 Jupyter Notebook)\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432810,
          "key": "ae37962d-85f5-4466-86d0-7e7890d7d4e8",
          "title": "总结",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ae37962d-85f5-4466-86d0-7e7890d7d4e8",
            "completed_at": "2019-03-05T12:30:12.602Z",
            "last_viewed_at": "2019-03-05T12:30:11.738Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432765,
              "key": "82da4df9-78d4-4401-843d-1c1e8d30b06f",
              "title": "总结",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "IanoSiET2nA",
                "china_cdn_id": "IanoSiET2nA.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}