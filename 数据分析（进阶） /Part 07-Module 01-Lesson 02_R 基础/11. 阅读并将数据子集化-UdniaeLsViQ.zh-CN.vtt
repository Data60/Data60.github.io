WEBVTT
Kind: captions
Language: zh-CN

00:00:00.210 --> 00:00:02.900
在接下来的三课 我们将探索一个数据集

00:00:02.900 --> 00:00:07.060
它类似于 Facebook 上的用户活动 但在接触该数据集之前

00:00:07.060 --> 00:00:09.150
我要向你介绍如何读取未在 R 中附带的数据

00:00:09.150 --> 00:00:12.410
以及如何为该数据划分子集

00:00:12.410 --> 00:00:15.170
实际上并不是所有数据集都可以方便地加载

00:00:15.170 --> 00:00:18.170
比如空的汽车数据集 在讲师注释中

00:00:18.170 --> 00:00:21.630
你可以找到下载新数据集的链接 这个数据集将包含

00:00:21.630 --> 00:00:25.280
美国50个州的数据 大多数来自

00:00:25.280 --> 00:00:28.750
大概在 1970 年前后 在我们读取数据前

00:00:28.750 --> 00:00:31.800
需要先设置我们的当前工作目录 所以要弄清楚

00:00:31.800 --> 00:00:35.240
你目前所在的目录 可键入 getwd

00:00:35.240 --> 00:00:38.300
可运行此命令并在控制台上查看输出

00:00:38.300 --> 00:00:40.780
看起来我已经位于下载文件内 

00:00:40.780 --> 00:00:43.730
这在控制台的顶部也会显示出来

00:00:43.730 --> 00:00:46.870
所以我不需要更改目录 但你可能会需要更改目录

00:00:46.870 --> 00:00:50.300
可键入 setwd 该命令接受一个字符串 

00:00:50.300 --> 00:00:52.510
即你想要使用的目录的文件路径

00:00:52.510 --> 00:00:54.970
我猜你的数据集位于

00:00:54.970 --> 00:00:58.670
你的下载文件中 所以我可能运行这个命令

00:00:58.670 --> 00:01:01.460
要注意的重要一点是 不论你使用 Mac 还是 Windows

00:01:01.460 --> 00:01:04.459
都需要用正斜杠来分割你的路径或者文件夹

00:01:04.459 --> 00:01:08.780
同时一定要使用引号把你的路径括起来

00:01:08.780 --> 00:01:11.894
现在要上传数据 我们可使用 read.csv 命令

00:01:11.894 --> 00:01:15.780
此命令接受一个字符串 即文件的名称

00:01:15.780 --> 00:01:17.800
这里我将把它传递给名叫 states info 的变量

00:01:17.800 --> 00:01:21.800
states info 将会把我们的全部数据保存为一个DataFrame

00:01:21.800 --> 00:01:24.560
当我运行此代码时 可以看到

00:01:24.560 --> 00:01:27.940
states info 出现我的环境中 我可以在

00:01:27.940 --> 00:01:30.230
工作空间中双击DataFrame 这样我就可以

00:01:30.230 --> 00:01:33.530
在 R Studio 里看到一个值表 现在比如说

00:01:33.530 --> 00:01:37.840
我想获取仅位于东北部的州的信息

00:01:37.840 --> 00:01:41.030
这些州比如康涅狄格州 它所处的

00:01:41.030 --> 00:01:44.110
州区域为1 我将回到 R-script

00:01:44.110 --> 00:01:46.760
写一行纳入此数据的命令

00:01:46.760 --> 00:01:50.130
这个子集命令就像这样 这里我将

00:01:50.130 --> 00:01:53.630
DataFrame状态信息传递给子集 并让它

00:01:53.630 --> 00:01:56.620
检索 state.region 等于1 的所有州

00:01:56.620 --> 00:01:59.210
我运行这个代码时 可以看到

00:01:59.210 --> 00:02:02.970
以下输出 包括康涅狄格州 缅因州 等等

00:02:02.970 --> 00:02:06.780
现在 有另一种划分此DataFrame子集的方法

00:02:06.780 --> 00:02:08.570
这里暂时不具体介绍 只是提一下 以便以后看到时

00:02:08.570 --> 00:02:12.130
不会让你感到困惑 它使用括号记法

00:02:12.130 --> 00:02:15.900
有数据集的名称 后跟两个括号

00:02:15.900 --> 00:02:19.460
中间有一个逗号 第一个点用于我们数据集的行

00:02:19.460 --> 00:02:22.630
我们希望保留 第二个点用于列

00:02:22.630 --> 00:02:25.440
我们希望保留 所以如果我只需要

00:02:25.440 --> 00:02:28.250
位于东北部的州 我会写下这个代码

00:02:28.250 --> 00:02:31.810
数据集的名称为 states info 然后我想要州区域等于1的行

00:02:31.810 --> 00:02:34.930
现在我在这里不能只使用州区域

00:02:34.930 --> 00:02:37.520
我需要访问实际变量 所以我要放入

00:02:37.520 --> 00:02:40.760
州信息和美元符号 这让我得到了实际的变量值 

00:02:40.760 --> 00:02:43.680
我看它是否等于1

00:02:43.680 --> 00:02:46.690
如果等于1 那么我想要返回DataFrame中的每个列

00:02:46.690 --> 00:02:51.040
比如对于康涅狄格州 如果其州区域等于1

00:02:51.040 --> 00:02:54.030
我想要返回此行中的每个列

00:02:54.030 --> 00:02:57.750
要返回所有列 我只需将其留空

00:02:57.750 --> 00:03:00.180
所以此代码搜索州区域等于1的道路

00:03:00.180 --> 00:03:02.910
然后将取出该行的所有列

00:03:02.910 --> 00:03:05.800
所有这些将发送给控制台

00:03:05.800 --> 00:03:08.750
作为一个新的DataFrame 现在 

00:03:08.750 --> 00:03:11.930
控制台中如果只有这个输出 可能用途不大

00:03:11.930 --> 00:03:15.990
所以我们可把这些子集保存到新变量 我还要包含一些函数

00:03:15.990 --> 00:03:18.760
用来打印出每个DataFrame的前两行 以及它们的大小

00:03:18.760 --> 00:03:23.110
希望我能让你们相信它们是相同的数据集

00:03:23.110 --> 00:03:25.710
我非常希望你仔细注意两个例子中的语法

00:03:25.710 --> 00:03:28.870
在整个课程中 我们倾向于

00:03:28.870 --> 00:03:31.940
使用这个子集命令 但也可能会有

00:03:31.940 --> 00:03:35.390
使用这个的时候 只需明白两种方法会产生

00:03:35.390 --> 00:03:38.890
相同的结果 我建议你尝试子集对国家内的其他区域

00:03:38.890 --> 00:03:41.270
来划分此DataFrame子集

00:03:41.270 --> 00:03:43.920
也可以尝试找出文盲率为0.5%的那些州

00:03:43.920 --> 00:03:48.430
或者高中毕业率高于50%的州

00:03:48.430 --> 00:03:49.980
请大家随意尝试

