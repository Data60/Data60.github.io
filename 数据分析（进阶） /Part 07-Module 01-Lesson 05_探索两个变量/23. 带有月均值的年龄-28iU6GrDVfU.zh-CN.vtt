WEBVTT
Kind: captions
Language: zh-CN

00:00:00.400 --> 00:00:02.600
你的目标是创建一个类似于 fc_by_age 的DataFrame

00:00:02.600 --> 00:00:05.930
但这次我希望使用

00:00:05.930 --> 00:00:09.640
月龄的好友数代替年龄

00:00:09.640 --> 00:00:12.592
你可能用过的方法之一就是 将 dplyr 运算链在一起

00:00:12.592 --> 00:00:15.340
首先 我们要确认

00:00:15.340 --> 00:00:18.060
库已经加载 然后我要创建自己的DataFrame

00:00:18.060 --> 00:00:23.480
pf.fc_by_age_months 所以我将取原始的DataFrame

00:00:23.480 --> 00:00:26.403
在它上面应用一些 dplyr 程序包提供的函数 

00:00:26.403 --> 00:00:29.570
首先 我使用带月份的年龄分组 然后链上一个

00:00:29.570 --> 00:00:33.080
叫做 summarize 的新命令 这里我要汇总的方法是

00:00:33.080 --> 00:00:36.200
按好友数平均值 好友数中位数 以及组内的用户数

00:00:36.200 --> 00:00:39.610
最后 我再链上一个命令

00:00:39.610 --> 00:00:42.990
将使用带月份的年龄整理我的DataFrame

00:00:42.990 --> 00:00:45.500
运行这个命令 可以看到生成新的DataFrame

00:00:45.500 --> 00:00:48.250
还要注意 我做了大量观察

00:00:48.250 --> 00:00:51.970
这应该有用 因为我从年龄转到月龄

00:00:51.970 --> 00:00:54.020
只是确认一下 我打印出DataFrame的一些行

00:00:54.020 --> 00:00:57.110
进行仔细检查

00:00:57.110 --> 00:00:59.190
这是用月份度量的年龄 好友数平均值 好友数中位数

00:01:00.540 --> 00:01:04.200
以及每个组内的用户数 n

00:01:04.200 --> 00:01:07.020
还有一种办法可得到相同的DataFrame

00:01:07.020 --> 00:01:09.380
我们看看如何做到 不需要将命令链在一起

00:01:09.380 --> 00:01:12.400
可使用DataFrame

00:01:12.400 --> 00:01:17.020
然后应用命令 首先创建 age_with_months.groups

00:01:17.020 --> 00:01:19.570
通过 group.by 命令来完成 

00:01:19.570 --> 00:01:23.720
将其传递给DataFrame 然后按照 age_with_months 进行分组 这是变量

00:01:23.720 --> 00:01:26.340
现在得到分组 我想要进行汇总

00:01:26.340 --> 00:01:30.140
按平均好友数 中位数好友数以及

00:01:30.140 --> 00:01:32.420
所在的每个组的用户数

00:01:32.420 --> 00:01:36.700
这里汇总 age-with-months 将其保存到新变量

00:01:36.700 --> 00:01:38.940
现在得到分组 然后使用 Summarize 命令

00:01:38.940 --> 00:01:40.930
进行汇总

00:01:40.930 --> 00:01:45.430
创建一个叫做 pf.fc_by_age_months2 的新DataFrame

00:01:45.430 --> 00:01:47.820
我要汇总这个DataFrame 因为它已在分组内

00:01:47.820 --> 00:01:52.640
所以将在这里传递 Age_with_month 组

00:01:52.640 --> 00:01:54.942
现在只需要添加要汇总的变量

00:01:54.942 --> 00:01:57.710
我想用好友数平均值 所以我将其保存到变量中

00:01:57.710 --> 00:02:00.250
我想用中位数好友数 所以我也将其保存到变量中

00:02:00.250 --> 00:02:03.430
最后 我想用每个年龄组的用户数

00:02:03.430 --> 00:02:06.480
现在我要取这个DataFrame

00:02:06.480 --> 00:02:10.520
然后按 age_with_months 进行整理 所以我将这个DataFrame传递给

00:02:10.520 --> 00:02:12.750
arrange 函数 然后告诉它

00:02:12.750 --> 00:02:16.220
按照 age_with_months 进行整理 也请注意 我将

00:02:16.220 --> 00:02:18.410
这个新DataFrame保存到我们的老DataFrame内

00:02:18.410 --> 00:02:21.170
所以我把它写下来 

00:02:21.170 --> 00:02:24.910
运行这里的所有代码 可以看到我们获得新的DataFrame

00:02:24.910 --> 00:02:26.450
同时使用 head 函数进行检查

00:02:26.450 --> 00:02:30.150
毫无疑问 DataFrame完全相同

